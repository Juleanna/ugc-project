# backend/apps/api/management/commands/export_translations.py
import os
import json
import polib
from django.core.management.base import BaseCommand
from django.conf import settings
from django.utils import translation


class Command(BaseCommand):
    help = '–ï–∫—Å–ø–æ—Ä—Ç –ø–µ—Ä–µ–∫–ª–∞–¥—ñ–≤ —É JSON —Ñ–æ—Ä–º–∞—Ç –¥–ª—è —Ñ—Ä–æ–Ω—Ç–µ–Ω–¥—É'

    def add_arguments(self, parser):
        parser.add_argument(
            '--locale',
            type=str,
            help='–õ–æ–∫–∞–ª—å (uk, en)',
        )
        parser.add_argument(
            '--include-dynamic',
            action='store_true',
            help='–í–∫–ª—é—á–∏—Ç–∏ –¥–∏–Ω–∞–º—ñ—á–Ω—ñ –ø–µ—Ä–µ–∫–ª–∞–¥–∏',
        )
        parser.add_argument(
            '--include-po',
            action='store_true',
            help='–í–∫–ª—é—á–∏—Ç–∏ –ø–µ—Ä–µ–∫–ª–∞–¥–∏ –∑ .po —Ñ–∞–π–ª—ñ–≤',
        )
        parser.add_argument(
            '--merge-existing',
            action='store_true',
            help='–û–±\'—î–¥–Ω–∞—Ç–∏ –∑ —ñ—Å–Ω—É—é—á–∏–º–∏ –ø–µ—Ä–µ–∫–ª–∞–¥–∞–º–∏',
        )

    def handle(self, *args, **options):
        output_dir = os.path.join(settings.BASE_DIR, 'translations')
        os.makedirs(output_dir, exist_ok=True)
        
        target_locale = options.get('locale')
        include_dynamic = options.get('include_dynamic', False)
        include_po = options.get('include_po', False)
        merge_existing = options.get('merge_existing', False)
        
        # –Ø–∫—â–æ –Ω–µ –≤–∫–∞–∑–∞–Ω–∞ –ª–æ–∫–∞–ª—å, –æ–±—Ä–æ–±–ª—è—î–º–æ –≤—Å—ñ
        locales = [target_locale] if target_locale else ['uk', 'en']
        
        for locale in locales:
            self.stdout.write(f'üåç –û–±—Ä–æ–±–∫–∞ –ª–æ–∫–∞–ª—ñ: {locale}')
            
            try:
                translations = {}
                
                # 1. –ó–∞–≤–∞–Ω—Ç–∞–∂—É—î–º–æ —ñ—Å–Ω—É—é—á—ñ –ø–µ—Ä–µ–∫–ª–∞–¥–∏ (—è–∫—â–æ –ø–æ—Ç—Ä—ñ–±–Ω–æ)
                if merge_existing:
                    existing_translations = self.load_existing_translations(output_dir, locale)
                    translations.update(existing_translations)
                    self.stdout.write(f'üìÅ –ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–æ {len(existing_translations)} —ñ—Å–Ω—É—é—á–∏—Ö –ø–µ—Ä–µ–∫–ª–∞–¥—ñ–≤')
                
                # 2. –ë–∞–∑–æ–≤—ñ —Ñ—Ä–æ–Ω—Ç–µ–Ω–¥ –ø–µ—Ä–µ–∫–ª–∞–¥–∏
                frontend_translations = self.get_frontend_translations(locale)
                translations.update(frontend_translations)
                self.stdout.write(f'üé® –î–æ–¥–∞–Ω–æ {len(frontend_translations)} —Ñ—Ä–æ–Ω—Ç–µ–Ω–¥ –ø–µ—Ä–µ–∫–ª–∞–¥—ñ–≤')
                
                # 3. –ü–µ—Ä–µ–∫–ª–∞–¥–∏ –∑ .po —Ñ–∞–π–ª—ñ–≤ Django (—è–∫—â–æ –ø–æ—Ç—Ä—ñ–±–Ω–æ)
                if include_po:
                    po_translations = self.get_po_translations(locale)
                    translations.update(po_translations)
                    self.stdout.write(f'üìù –î–æ–¥–∞–Ω–æ {len(po_translations)} –ø–µ—Ä–µ–∫–ª–∞–¥—ñ–≤ –∑ .po —Ñ–∞–π–ª—ñ–≤')
                
                # 4. –î–∏–Ω–∞–º—ñ—á–Ω—ñ –ø–µ—Ä–µ–∫–ª–∞–¥–∏ –∑ –º–æ–¥–µ–ª–µ–π (—è–∫—â–æ –ø–æ—Ç—Ä—ñ–±–Ω–æ)
                if include_dynamic:
                    dynamic_translations = self.get_dynamic_translations(locale)
                    translations.update(dynamic_translations)
                    self.stdout.write(f'üîÑ –î–æ–¥–∞–Ω–æ {len(dynamic_translations)} –¥–∏–Ω–∞–º—ñ—á–Ω–∏—Ö –ø–µ—Ä–µ–∫–ª–∞–¥—ñ–≤')
                
                # 5. –ó–±–µ—Ä–µ–∂–µ–Ω–Ω—è —Ñ–∞–π–ª—É
                output_file = os.path.join(output_dir, f'{locale}.json')
                with open(output_file, 'w', encoding='utf-8') as f:
                    json.dump(translations, f, ensure_ascii=False, indent=2)
                
                self.stdout.write(
                    self.style.SUCCESS(
                        f'‚úÖ –£—Å–ø—ñ—à–Ω–æ –µ–∫—Å–ø–æ—Ä—Ç–æ–≤–∞–Ω–æ {len(translations)} –ø–µ—Ä–µ–∫–ª–∞–¥—ñ–≤ –¥–ª—è {locale} ‚Üí {output_file}'
                    )
                )
                
            except Exception as e:
                self.stdout.write(
                    self.style.ERROR(f'‚ùå –ü–æ–º–∏–ª–∫–∞ –¥–ª—è {locale}: {str(e)}')
                )

    def load_existing_translations(self, output_dir, locale):
        """–ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è —ñ—Å–Ω—É—é—á–∏—Ö –ø–µ—Ä–µ–∫–ª–∞–¥—ñ–≤"""
        file_path = os.path.join(output_dir, f'{locale}.json')
        if os.path.exists(file_path):
            try:
                with open(file_path, 'r', encoding='utf-8') as f:
                    return json.load(f)
            except Exception as e:
                self.stdout.write(f'–ü–æ–º–∏–ª–∫–∞ —á–∏—Ç–∞–Ω–Ω—è —ñ—Å–Ω—É—é—á–æ–≥–æ —Ñ–∞–π–ª—É: {e}')
        return {}

    def get_po_translations(self, locale):
        """–ü–µ—Ä–µ–∫–ª–∞–¥–∏ –∑ .po —Ñ–∞–π–ª—ñ–≤ Django"""
        po_file_path = os.path.join(
            settings.BASE_DIR,
            'locale',
            locale,
            'LC_MESSAGES',
            'django.po'
        )
        
        translations = {}
        
        if os.path.exists(po_file_path):
            try:
                po = polib.pofile(po_file_path)
                for entry in po:
                    if entry.msgstr:  # –Ø–∫—â–æ –ø–µ—Ä–µ–∫–ª–∞–¥ —ñ—Å–Ω—É—î
                        # –ó–±–µ—Ä—ñ–≥–∞—î–º–æ —è–∫ –æ—Ä–∏–≥—ñ–Ω–∞–ª—å–Ω–∏–π –∫–ª—é—á, —Ç–∞–∫ —ñ –ø—ñ–¥–≥–æ—Ç–æ–≤–ª–µ–Ω–∏–π –¥–ª—è —Ñ—Ä–æ–Ω—Ç–µ–Ω–¥—É
                        translations[entry.msgid] = entry.msgstr
                        
                        # –°—Ç–≤–æ—Ä—é—î–º–æ –∫–ª—é—á –¥–ª—è —Ñ—Ä–æ–Ω—Ç–µ–Ω–¥—É (–∑–∞–º—ñ–Ω—é—î–º–æ –ø—Ä–æ–±—ñ–ª–∏ –Ω–∞ –∫—Ä–∞–ø–∫–∏)
                        frontend_key = self.create_frontend_key(entry.msgid)
                        if frontend_key != entry.msgid:
                            translations[frontend_key] = entry.msgstr
                            
            except Exception as e:
                self.stdout.write(f'–ü–æ–º–∏–ª–∫–∞ —á–∏—Ç–∞–Ω–Ω—è .po —Ñ–∞–π–ª—É: {e}')
        
        return translations

    def create_frontend_key(self, msgid):
        """–°—Ç–≤–æ—Ä—é—î –∫–ª—é—á –¥–ª—è —Ñ—Ä–æ–Ω—Ç–µ–Ω–¥—É –∑ msgid"""
        if not msgid:
            return ''
        
        # –ü–µ—Ä–µ—Ç–≤–æ—Ä—é—î–º–æ –≤ lowercase —Ç–∞ –∑–∞–º—ñ–Ω—é—î–º–æ –ø—Ä–æ–±—ñ–ª–∏ –Ω–∞ –∫—Ä–∞–ø–∫–∏
        key = msgid.lower()
        key = key.replace(' ', '.')
        key = key.replace("'", '')  # –í–∏–¥–∞–ª—è—î–º–æ –∞–ø–æ—Å—Ç—Ä–æ—Ñ–∏
        key = key.replace('"', '')  # –í–∏–¥–∞–ª—è—î–º–æ –ª–∞–ø–∫–∏
        
        # –ó–∞–º—ñ–Ω—é—î–º–æ —Å–ø–µ—Ü—ñ–∞–ª—å–Ω—ñ —Å–∏–º–≤–æ–ª–∏
        replacements = {
            '—ñ': 'i',
            '—ó': 'i', 
            '—î': 'e',
            '“ë': 'g',
            '—å': '',
            "'": '',
            '(': '',
            ')': '',
            '/': '.',
            '-': '.',
            ',': '',
            ':': '',
            ';': '',
        }
        
        for old, new in replacements.items():
            key = key.replace(old, new)
        
        # –í–∏–¥–∞–ª—è—î–º–æ –º–Ω–æ–∂–∏–Ω–Ω—ñ –∫—Ä–∞–ø–∫–∏
        while '..' in key:
            key = key.replace('..', '.')
            
        # –í–∏–¥–∞–ª—è—î–º–æ –∫—Ä–∞–ø–∫–∏ –Ω–∞ –ø–æ—á–∞—Ç–∫—É —Ç–∞ –≤ –∫—ñ–Ω—Ü—ñ
        key = key.strip('.')
        
        return key

    def get_frontend_translations(self, locale):
        """–ü–µ—Ä–µ–∫–ª–∞–¥–∏ –¥–ª—è —Ñ—Ä–æ–Ω—Ç–µ–Ω–¥—É (UI –µ–ª–µ–º–µ–Ω—Ç–∏)"""
        if locale == 'uk':
            return {
                # –ù–∞–≤—ñ–≥–∞—Ü—ñ—è
                "nav.home": "–ì–æ–ª–æ–≤–Ω–∞",
                "nav.about": "–ü—Ä–æ –Ω–∞—Å",
                "nav.services": "–ü–æ—Å–ª—É–≥–∏",
                "nav.projects": "–ü—Ä–æ–µ–∫—Ç–∏",
                "nav.contact": "–ö–æ–Ω—Ç–∞–∫—Ç–∏",
                "nav.jobs": "–í–∞–∫–∞–Ω—Å—ñ—ó",
                
                # –ó–∞–≥–∞–ª—å–Ω—ñ –µ–ª–µ–º–µ–Ω—Ç–∏
                "common.loading": "–ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è...",
                "common.error": "–ü–æ–º–∏–ª–∫–∞",
                "common.retry": "–°–ø—Ä–æ–±—É–≤–∞—Ç–∏ –∑–Ω–æ–≤—É",
                "common.save": "–ó–±–µ—Ä–µ–≥—Ç–∏",
                "common.cancel": "–°–∫–∞—Å—É–≤–∞—Ç–∏",
                "common.submit": "–í—ñ–¥–ø—Ä–∞–≤–∏—Ç–∏",
                "common.back": "–ù–∞–∑–∞–¥",
                "common.next": "–î–∞–ª—ñ",
                "common.close": "–ó–∞–∫—Ä–∏—Ç–∏",
                "common.open": "–í—ñ–¥–∫—Ä–∏—Ç–∏",
                "common.edit": "–†–µ–¥–∞–≥—É–≤–∞—Ç–∏",
                "common.delete": "–í–∏–¥–∞–ª–∏—Ç–∏",
                "common.view": "–ü–µ—Ä–µ–≥–ª—è–Ω—É—Ç–∏",
                "common.download": "–ó–∞–≤–∞–Ω—Ç–∞–∂–∏—Ç–∏",
                
                # –§–æ—Ä–º–∏
                "form.name": "–Ü–º'—è",
                "form.email": "–ï–ª–µ–∫—Ç—Ä–æ–Ω–Ω–∞ –ø–æ—à—Ç–∞",
                "form.phone": "–¢–µ–ª–µ—Ñ–æ–Ω",
                "form.company": "–ö–æ–º–ø–∞–Ω—ñ—è",
                "form.message": "–ü–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è",
                "form.subject": "–¢–µ–º–∞",
                "form.send": "–í—ñ–¥–ø—Ä–∞–≤–∏—Ç–∏",
                "form.required": "–û–±–æ–≤'—è–∑–∫–æ–≤–µ –ø–æ–ª–µ",
                "form.invalid": "–ù–µ–∫–æ—Ä–µ–∫—Ç–Ω–µ –∑–Ω–∞—á–µ–Ω–Ω—è",
                "form.success": "–§–æ—Ä–º–∞ —É—Å–ø—ñ—à–Ω–æ –≤—ñ–¥–ø—Ä–∞–≤–ª–µ–Ω–∞",
                
                # –ì–æ–ª–æ–≤–Ω–∞ —Å—Ç–æ—Ä—ñ–Ω–∫–∞
                "hero.title": "–í–∏—Ä–æ–±–Ω–∏–∫ —Å–ø–µ—Ü–æ–¥—è–≥—É –≤ –£–∫—Ä–∞—ó–Ω—ñ.",
                "hero.description": "–ú–∏ —Å—Ç–≤–æ—Ä—é—î–º–æ —è–∫—ñ—Å–Ω–∏–π —Ç–∞ –Ω–∞–¥—ñ–π–Ω–∏–π —Å–ø–µ—Ü–æ–¥—è–≥, —è–∫–∏–π –∑–∞–±–µ–∑–ø–µ—á—É—î –∫–æ–º—Ñ–æ—Ä—Ç —ñ –±–µ–∑–ø–µ–∫—É –≤ –±—É–¥—å-—è–∫–∏—Ö —É–º–æ–≤–∞—Ö.",
                
                "clients.title": "–ú–∏ –ø—Ä–∞—Ü—é—î–º–æ –∑ –ø—Ä–æ–≤—ñ–¥–Ω–∏–º–∏ –∫–æ–º–ø–∞–Ω—ñ—è–º–∏ –£–∫—Ä–∞—ó–Ω–∏ —Ç–∞ –Ñ–≤—Ä–æ–ø–∏",
                
                "caseStudies.title": "–ù–∞–¥—ñ–π–Ω—ñ—Å—Ç—å —Ç–∞ —è–∫—ñ—Å—Ç—å —É –∫–æ–∂–Ω—ñ–π –¥–µ—Ç–∞–ª—ñ",
                "caseStudies.description": "–ù–∞—à –±–∞–≥–∞—Ç–æ—Ä—ñ—á–Ω–∏–π –¥–æ—Å–≤—ñ–¥ —É –≤–∏—Ä–æ–±–Ω–∏—Ü—Ç–≤—ñ —Å–ø–µ—Ü–æ–¥—è–≥—É –≥–∞—Ä–∞–Ω—Ç—É—î –≤–∏—Å–æ–∫—É —è–∫—ñ—Å—Ç—å —ñ –Ω–∞–¥—ñ–π–Ω—ñ—Å—Ç—å –∫–æ–∂–Ω–æ–≥–æ –≤–∏—Ä–æ–±—É.",
                "caseStudies.successfulProject": "–£—Å–ø—ñ—à–Ω–∏–π –ø—Ä–æ—î–∫—Ç",
                "caseStudies.items.phobia.title": "–ó–∞—Ö–∏—Å–Ω–∏–π –æ–¥—è–≥ –¥–ª—è –ø—Ä–æ–º–∏—Å–ª–æ–≤–æ—Å—Ç—ñ",
                "caseStudies.items.phobia.description": "–†–æ–∑—Ä–æ–±–∫–∞ —Ç–∞ –≤–∏–≥–æ—Ç–æ–≤–ª–µ–Ω–Ω—è —Å–ø–µ—Ü–æ–¥—è–≥—É –¥–ª—è –∑–∞—Ö–∏—Å—Ç—É –ø—Ä–∞—Ü—ñ–≤–Ω–∏–∫—ñ–≤ —É –≤–∞–∂–∫–∏—Ö —É–º–æ–≤–∞—Ö.",
                "caseStudies.items.familyFund.title": "–ú–µ–¥–∏—á–Ω–∏–π –æ–¥—è–≥",
                "caseStudies.items.familyFund.description": "–ö–æ–º—Ñ–æ—Ä—Ç–Ω–∏–π —Ç–∞ —Ñ—É–Ω–∫—Ü—ñ–æ–Ω–∞–ª—å–Ω–∏–π –º–µ–¥–∏—á–Ω–∏–π –æ–¥—è–≥ –¥–ª—è –ø–µ—Ä—Å–æ–Ω–∞–ª—É –ª—ñ–∫–∞—Ä–µ–Ω—å.",
                "caseStudies.items.unseal.title": "–í—ñ–π—Å—å–∫–æ–≤–∞ —Ñ–æ—Ä–º–∞",
                "caseStudies.items.unseal.description": "–ù–∞–¥—ñ–π–Ω–∞ —Ç–∞ –ø—Ä–∞–∫—Ç–∏—á–Ω–∞ —Ñ–æ—Ä–º–∞ –¥–ª—è –≤—ñ–π—Å—å–∫–æ–≤–∏—Ö –ø—ñ–¥—Ä–æ–∑–¥—ñ–ª—ñ–≤.",
                
                "services.eyebrow": "–ü–æ—Å–ª—É–≥–∏",
                "services.title": "–ú–∏ —Å—Ç–≤–æ—Ä—é—î–º–æ —è–∫—ñ—Å–Ω–∏–π —Å–ø–µ—Ü–æ–¥—è–≥ –ø—ñ–¥ –≤–∞—à—ñ –ø–æ—Ç—Ä–µ–±–∏.",
                "services.description": "–ú–∏ –≤–∏–≥–æ—Ç–æ–≤–ª—è—î–º–æ —Å–ø–µ—Ü–æ–¥—è–≥ –¥–ª—è —Ä—ñ–∑–Ω–∏—Ö –≥–∞–ª—É–∑–µ–π, –≤–∫–ª—é—á–∞—é—á–∏ –≤—ñ–π—Å—å–∫–æ–≤—É —Ñ–æ—Ä–º—É, –º–µ–¥–∏—á–Ω–∏–π –æ–¥—è–≥, –∞ —Ç–∞–∫–æ–∂ —Å–ø–µ—Ü–æ–¥—è–≥ –¥–ª—è —ñ–Ω—à–∏—Ö —Å—Ñ–µ—Ä.",
                "services.technicalSpecs.title": "–†–æ–∑—Ä–æ–±–∫–∞ —Ç–µ—Ö–Ω—ñ—á–Ω–∏—Ö —É–º–æ–≤ (–¢–£)",
                "services.technicalSpecs.description": "–ú–∏ —Å–ø–µ—Ü—ñ–∞–ª—ñ–∑—É—î–º–æ—Å—è –Ω–∞ —Å—Ç–≤–æ—Ä–µ–Ω–Ω—ñ —Ç–µ—Ö–Ω—ñ—á–Ω–∏—Ö —É–º–æ–≤ –∑–≥—ñ–¥–Ω–æ –∑ –≤–∞—à–∏–º–∏ –≤–∏–º–æ–≥–∞–º–∏.",
                "services.tailoring.title": "–ü–æ—à–∏—Ç—Ç—è –æ–¥—è–≥—É",
                "services.tailoring.description": "–ó–∞ –≤–∞—à–∏–º–∏ —Å–ø–µ—Ü–∏—Ñ—ñ–∫–∞—Ü—ñ—è–º–∏ –º–∏ –≤–∏–≥–æ—Ç–æ–≤–ª—è—î–º–æ –ø—Ä–æ–¥—É–∫—Ü—ñ—é –∑ –≤–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è–º –≤–∞—à–∏—Ö –º–∞—Ç–µ—Ä—ñ–∞–ª—ñ–≤ –∞–±–æ –Ω–∞—à–∏—Ö –≤–ª–∞—Å–Ω–∏—Ö.",
                "services.logoApplication.title": "–ù–∞–Ω–µ—Å–µ–Ω–Ω—è –ª–æ–≥–æ—Ç–∏–ø—É",
                "services.logoApplication.description": "–ú–∏ –ø—Ä–æ–ø–æ–Ω—É—î–º–æ –ø–æ—Å–ª—É–≥–∏ –Ω–∞–Ω–µ—Å–µ–Ω–Ω—è –ª–æ–≥–æ—Ç–∏–ø—É –∞–±–æ –±—Ä–µ–Ω–¥—É –Ω–∞ –≤–∏—Ä–æ–±–∏.",
                "services.other.title": "–Ü–Ω—à–µ",
                "services.other.description": "–ö—Ä—ñ–º —Ç–æ–≥–æ, –º–∏ –ø—Ä–æ–ø–æ–Ω—É—î–º–æ —à–∏—Ä–æ–∫–∏–π –∞—Å–æ—Ä—Ç–∏–º–µ–Ω—Ç –≥–æ—Ç–æ–≤–∏—Ö –≤–∏—Ä–æ–±—ñ–≤, —Ç–∫–∞–Ω–∏–Ω —Ç–∞ —Ñ—É—Ä–Ω—ñ—Ç—É—Ä–∏.",
                
                "testimonial.quote": "–ö–æ–º–∞–Ω–¥–∞ UGC –ø–µ—Ä–µ–≤–µ—Ä—à–∏–ª–∞ –Ω–∞—à—ñ –æ—á—ñ–∫—É–≤–∞–Ω–Ω—è, –∑–∞–±–µ–∑–ø–µ—á–∏–≤—à–∏ –≤–∏—Å–æ–∫—É —è–∫—ñ—Å—Ç—å —Å–ø–µ—Ü–æ–¥—è–≥—É —Ç–∞ –¥–æ—Ç—Ä–∏–º–∞–Ω–Ω—è —Ç–µ—Ä–º—ñ–Ω—ñ–≤. –í—ñ–¥–º—ñ–Ω–Ω–∞ –∫–æ–º—É–Ω—ñ–∫–∞—Ü—ñ—è —ñ –ø—Ä–æ—Ñ–µ—Å—ñ–π–Ω–∏–π –ø—ñ–¥—Ö—ñ–¥ –∑—Ä–æ–±–∏–ª–∏ —Å–ø—ñ–≤–ø—Ä–∞—Ü—é –ª–µ–≥–∫–æ—é —Ç–∞ –µ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—é.",
                
                # –ü—Ä–æ—Ü–µ—Å —Ä–æ–±–æ—Ç–∏
                "process.discover.title": "–ê–Ω–∞–ª—ñ–∑ –ø–æ—Ç—Ä–µ–±",
                "process.discover.description1": "–ù–∞—à–∞ –∫–æ–º–∞–Ω–¥–∞ –ø—Ä–æ–≤–æ–¥–∏—Ç—å —Ä–µ—Ç–µ–ª—å–Ω–∏–π –∞–Ω–∞–ª—ñ–∑ —Å–ø–µ—Ü–∏—Ñ—ñ–∫–∏ –≤–∞—à–æ—ó –¥—ñ—è–ª—å–Ω–æ—Å—Ç—ñ, —É–º–æ–≤ –ø—Ä–∞—Ü—ñ —Ç–∞ –æ—Å–æ–±–ª–∏–≤–∏—Ö –ø–æ—Ç—Ä–µ–±.",
                "process.discover.description2": "–ù–∞ —Ü—å–æ–º—É –µ—Ç–∞–ø—ñ –º–∏ –≤–∏–∑–Ω–∞—á–∞—î–º–æ —Ç–µ—Ö–Ω—ñ—á–Ω—ñ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏, –º–∞—Ç–µ—Ä—ñ–∞–ª–∏, –¥–∏–∑–∞–π–Ω —Ç–∞ —Ñ—É–Ω–∫—Ü—ñ–æ–Ω–∞–ª—å–Ω—ñ –æ—Å–æ–±–ª–∏–≤–æ—Å—Ç—ñ –º–∞–π–±—É—Ç–Ω—å–æ–≥–æ —Å–ø–µ—Ü–æ–¥—è–≥—É.",
                "process.build.title": "–†–æ–∑—Ä–æ–±–∫–∞",
                "process.build.description1": "–ù–∞ –æ—Å–Ω–æ–≤—ñ –∑—ñ–±—Ä–∞–Ω–∏—Ö –¥–∞–Ω–∏—Ö –º–∏ —Ä–æ–∑—Ä–æ–±–ª—è—î–º–æ —Ç–µ—Ö–Ω—ñ—á–Ω—É –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü—ñ—é, —Å—Ç–≤–æ—Ä—é—î–º–æ –ª–µ–∫–∞–ª–∞ —Ç–∞ –≤–∏–≥–æ—Ç–æ–≤–ª—è—î–º–æ –ø–µ—Ä—à—ñ –∑—Ä–∞–∑–∫–∏ –¥–ª—è —Ç–µ—Å—Ç—É–≤–∞–Ω–Ω—è.",
                "process.deliver.title": "–í–∏—Ä–æ–±–Ω–∏—Ü—Ç–≤–æ",
                "process.deliver.description1": "–ü—ñ—Å–ª—è –∑–∞—Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—è –∑—Ä–∞–∑–∫—ñ–≤ –º–∏ –ø–µ—Ä–µ—Ö–æ–¥–∏–º–æ –¥–æ —Å–µ—Ä—ñ–π–Ω–æ–≥–æ –≤–∏—Ä–æ–±–Ω–∏—Ü—Ç–≤–∞ –∑ –∫–æ–Ω—Ç—Ä–æ–ª–µ–º —è–∫–æ—Å—Ç—ñ –Ω–∞ –∫–æ–∂–Ω–æ–º—É –µ—Ç–∞–ø—ñ.",
                
                # –ö–æ–Ω—Ç–∞–∫—Ç–∏
                "contact.title": "–ó–≤'—è–∂—ñ—Ç—å—Å—è –∑ –Ω–∞–º–∏",
                "contact.description": "–ì–æ—Ç–æ–≤—ñ –≤—ñ–¥–ø–æ–≤—ñ—Å—Ç–∏ –Ω–∞ –≤–∞—à—ñ –∑–∞–ø–∏—Ç–∞–Ω–Ω—è —Ç–∞ –æ–±–≥–æ–≤–æ—Ä–∏—Ç–∏ –º–æ–∂–ª–∏–≤–æ—Å—Ç—ñ —Å–ø—ñ–≤–ø—Ä–∞—Ü—ñ.",
                "contact.getInTouch": "–Ø–∫ –∑ –Ω–∞–º–∏ –∑–≤'—è–∑–∞—Ç–∏—Å—è",
                
                # –§—É—Ç–µ—Ä
                "footer.company": "–ö–æ–º–ø–∞–Ω—ñ—è",
                "footer.services": "–ü–æ—Å–ª—É–≥–∏",
                "footer.projects": "–ü—Ä–æ–µ–∫—Ç–∏",
                "footer.contact": "–ö–æ–Ω—Ç–∞–∫—Ç–∏",
                "footer.privacy": "–ü–æ–ª—ñ—Ç–∏–∫–∞ –∫–æ–Ω—Ñ—ñ–¥–µ–Ω—Ü—ñ–π–Ω–æ—Å—Ç—ñ",
                "footer.terms": "–£–º–æ–≤–∏ –≤–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è",
                "footer.rights": "–í—Å—ñ –ø—Ä–∞–≤–∞ –∑–∞—Ö–∏—â–µ–Ω—ñ",
            }
            
        elif locale == 'en':
            return {
                # Navigation
                "nav.home": "Home",
                "nav.about": "About",
                "nav.services": "Services",
                "nav.projects": "Projects",
                "nav.contact": "Contact",
                "nav.jobs": "Jobs",
                
                # Common
                "common.loading": "Loading...",
                "common.error": "Error",
                "common.retry": "Try again",
                "common.save": "Save",
                "common.cancel": "Cancel",
                "common.submit": "Submit",
                "common.back": "Back",
                "common.next": "Next",
                "common.close": "Close",
                "common.open": "Open",
                "common.edit": "Edit",
                "common.delete": "Delete",
                "common.view": "View",
                "common.download": "Download",
                
                # Forms
                "form.name": "Name",
                "form.email": "Email",
                "form.phone": "Phone",
                "form.company": "Company",
                "form.message": "Message",
                "form.subject": "Subject",
                "form.send": "Send",
                "form.required": "Required field",
                "form.invalid": "Invalid value",
                "form.success": "Form submitted successfully",
                
                # Homepage
                "hero.title": "Workwear Manufacturer in Ukraine.",
                "hero.description": "We create high-quality and reliable workwear that ensures comfort and safety in any conditions.",
                
                "clients.title": "We work with leading companies in Ukraine and Europe",
                
                "caseStudies.title": "Reliability and quality in every detail",
                "caseStudies.description": "Our many years of experience in workwear manufacturing guarantees high quality and reliability of every product.",
                "caseStudies.successfulProject": "Successful project",
                "caseStudies.items.phobia.title": "Protective clothing for industry",
                "caseStudies.items.phobia.description": "Development and manufacturing of workwear to protect workers in harsh conditions.",
                "caseStudies.items.familyFund.title": "Medical clothing",
                "caseStudies.items.familyFund.description": "Comfortable and functional medical clothing for hospital staff.",
                "caseStudies.items.unseal.title": "Military uniform",
                "caseStudies.items.unseal.description": "Reliable and practical uniform for military units.",
                
                "services.eyebrow": "Services",
                "services.title": "We create quality workwear tailored to your needs.",
                "services.description": "We manufacture workwear for various industries, including military uniforms, medical clothing, and workwear for other sectors.",
                "services.technicalSpecs.title": "Technical Specifications Development",
                "services.technicalSpecs.description": "We specialize in creating technical specifications according to your requirements.",
                "services.tailoring.title": "Clothing Manufacturing",
                "services.tailoring.description": "According to your specifications, we manufacture products using your materials or our own.",
                "services.logoApplication.title": "Logo Application",
                "services.logoApplication.description": "We offer logo or brand application services on products.",
                "services.other.title": "Other",
                "services.other.description": "In addition, we offer a wide range of ready-made products, fabrics and accessories.",
                
                "testimonial.quote": "The UGC team exceeded our expectations by ensuring high quality workwear and meeting deadlines. Excellent communication and professional approach made the collaboration easy and effective.",
                
                # Process
                "process.discover.title": "Needs Analysis",
                "process.discover.description1": "Our team conducts a thorough analysis of your business specifics, working conditions and special needs.",
                "process.discover.description2": "At this stage, we determine the technical characteristics, materials, design and functional features of the future workwear.",
                "process.build.title": "Development",
                "process.build.description1": "Based on the collected data, we develop technical documentation, create patterns and produce the first samples for testing.",
                "process.deliver.title": "Production",
                "process.deliver.description1": "After approval of samples, we proceed to mass production with quality control at every stage.",
                
                # Contact
                "contact.title": "Contact Us",
                "contact.description": "Ready to answer your questions and discuss collaboration opportunities.",
                "contact.getInTouch": "Get in Touch",
                
                # Footer
                "footer.company": "Company",
                "footer.services": "Services",
                "footer.projects": "Projects",
                "footer.contact": "Contact",
                "footer.privacy": "Privacy Policy",
                "footer.terms": "Terms of Service",
                "footer.rights": "All rights reserved",
            }
        else:
            return {}

    def get_dynamic_translations(self, locale):
        """–î–∏–Ω–∞–º—ñ—á–Ω—ñ –ø–µ—Ä–µ–∫–ª–∞–¥–∏ –∑ Django –º–æ–¥–µ–ª–µ–π"""
        from django.utils import translation
        
        translation.activate(locale)
        translations = {}
        
        try:
            # –ü–æ—Å–ª—É–≥–∏
            try:
                from apps.services.models import Service
                services = Service.objects.filter(is_active=True)
                for service in services:
                    if hasattr(service, 'name'):
                        # –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ —è–∫ ID, —Ç–∞–∫ —ñ slug (—è–∫—â–æ —î)
                        if hasattr(service, 'slug') and service.slug:
                            key_base = f"service.{service.slug}"
                        else:
                            key_base = f"service.{service.pk}"
                            
                        translations[f"{key_base}.name"] = str(service.name)
                        
                        if hasattr(service, 'short_description') and service.short_description:
                            translations[f"{key_base}.description"] = str(service.short_description)
                            
            except Exception as e:
                self.stdout.write(f"‚ö†Ô∏è –ü–æ—Å–ª—É–≥–∏: {e}")
            
            # –ö–∞—Ç–µ–≥–æ—Ä—ñ—ó –ø—Ä–æ–µ–∫—Ç—ñ–≤
            try:
                from apps.projects.models import ProjectCategory
                categories = ProjectCategory.objects.filter(is_active=True)
                for category in categories:
                    if hasattr(category, 'name'):
                        if hasattr(category, 'slug') and category.slug:
                            key_base = f"category.{category.slug}"
                        else:
                            key_base = f"category.{category.pk}"
                            
                        translations[f"{key_base}.name"] = str(category.name)
                        
                        if hasattr(category, 'description') and category.description:
                            translations[f"{key_base}.description"] = str(category.description)
                            
            except Exception as e:
                self.stdout.write(f"‚ö†Ô∏è –ö–∞—Ç–µ–≥–æ—Ä—ñ—ó: {e}")
            
            # –ü—Ä–æ–µ–∫—Ç–∏ (–æ–±–º–µ–∂—É—î–º–æ –∫—ñ–ª—å–∫—ñ—Å—Ç—å)
            try:
                from apps.projects.models import Project
                projects = Project.objects.filter(is_active=True)[:10]
                for project in projects:
                    if hasattr(project, 'title'):
                        if hasattr(project, 'slug') and project.slug:
                            key_base = f"project.{project.slug}"
                        else:
                            key_base = f"project.{project.pk}"
                            
                        translations[f"{key_base}.title"] = str(project.title)
                        
                        if hasattr(project, 'short_description') and project.short_description:
                            translations[f"{key_base}.description"] = str(project.short_description)
                            
            except Exception as e:
                self.stdout.write(f"‚ö†Ô∏è –ü—Ä–æ–µ–∫—Ç–∏: {e}")
            
            # –ì–æ–ª–æ–≤–Ω–∞ —Å—Ç–æ—Ä—ñ–Ω–∫–∞
            try:
                from apps.content.models import HomePage
                homepage = HomePage.objects.filter(is_active=True).first()
                if homepage:
                    if hasattr(homepage, 'company_description') and homepage.company_description:
                        translations['homepage.company_description'] = str(homepage.company_description)
                    if hasattr(homepage, 'mission_text') and homepage.mission_text:
                        translations['homepage.mission_text'] = str(homepage.mission_text)
                    if hasattr(homepage, 'values_text') and homepage.values_text:
                        translations['homepage.values_text'] = str(homepage.values_text)
                        
            except Exception as e:
                self.stdout.write(f"‚ö†Ô∏è –ì–æ–ª–æ–≤–Ω–∞ —Å—Ç–æ—Ä—ñ–Ω–∫–∞: {e}")
                
        except Exception as e:
            self.stdout.write(f"‚ö†Ô∏è –ó–∞–≥–∞–ª—å–Ω–∞ –ø–æ–º–∏–ª–∫–∞ –¥–∏–Ω–∞–º—ñ—á–Ω–∏—Ö –ø–µ—Ä–µ–∫–ª–∞–¥—ñ–≤: {e}")
        finally:
            translation.deactivate()
            
        return translations
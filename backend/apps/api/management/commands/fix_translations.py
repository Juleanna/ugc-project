# backend/apps/api/management/commands/fix_translations.py
import os
import json
import polib
from django.core.management.base import BaseCommand
from django.conf import settings
from django.utils import translation
from django.core.cache import cache


class Command(BaseCommand):
    help = '–í–∏–ø—Ä–∞–≤–ª–µ–Ω–Ω—è —Ç–∞ —Å–∏–Ω—Ö—Ä–æ–Ω—ñ–∑–∞—Ü—ñ—è –≤—Å—ñ—Ö –ø–µ—Ä–µ–∫–ª–∞–¥—ñ–≤'

    def add_arguments(self, parser):
        parser.add_argument(
            '--locale',
            type=str,
            choices=['uk', 'en'],
            help='–ö–æ–Ω–∫—Ä–µ—Ç–Ω–∞ –ª–æ–∫–∞–ª—å –¥–ª—è –æ–±—Ä–æ–±–∫–∏ (uk –∞–±–æ en)',
        )
        parser.add_argument(
            '--fix-po',
            action='store_true',
            help='–í–∏–ø—Ä–∞–≤–∏—Ç–∏ –ø–æ–º–∏–ª–∫–∏ –≤ .po —Ñ–∞–π–ª–∞—Ö',
        )
        parser.add_argument(
            '--export-static',
            action='store_true',
            help='–ï–∫—Å–ø–æ—Ä—Ç—É–≤–∞—Ç–∏ —Å—Ç–∞—Ç–∏—á–Ω—ñ –ø–µ—Ä–µ–∫–ª–∞–¥–∏',
        )
        parser.add_argument(
            '--clear-cache',
            action='store_true',
            help='–û—á–∏—Å—Ç–∏—Ç–∏ –∫–µ—à –ø–µ—Ä–µ–∫–ª–∞–¥—ñ–≤',
        )
        parser.add_argument(
            '--validate',
            action='store_true',
            help='–í–∞–ª—ñ–¥—É–≤–∞—Ç–∏ –ø–µ—Ä–µ–∫–ª–∞–¥–∏',
        )

    def handle(self, *args, **options):
        self.stdout.write(self.style.SUCCESS('üîß –ü–æ—á–∞—Ç–æ–∫ –≤–∏–ø—Ä–∞–≤–ª–µ–Ω–Ω—è –ø–µ—Ä–µ–∫–ª–∞–¥—ñ–≤...'))
        
        target_locale = options.get('locale')
        locales = [target_locale] if target_locale else ['uk', 'en']
        
        # 1. –û—á–∏—â–µ–Ω–Ω—è –∫–µ—à—É
        if options.get('clear_cache'):
            self.clear_translations_cache()
        
        # 2. –í–∏–ø—Ä–∞–≤–ª–µ–Ω–Ω—è .po —Ñ–∞–π–ª—ñ–≤
        if options.get('fix_po'):
            for locale in locales:
                self.fix_po_file(locale)
        
        # 3. –ï–∫—Å–ø–æ—Ä—Ç —Å—Ç–∞—Ç–∏—á–Ω–∏—Ö –ø–µ—Ä–µ–∫–ª–∞–¥—ñ–≤
        if options.get('export_static'):
            for locale in locales:
                self.export_static_translations(locale)
        
        # 4. –í–∞–ª—ñ–¥–∞—Ü—ñ—è
        if options.get('validate'):
            for locale in locales:
                self.validate_translations(locale)
        
        self.stdout.write(self.style.SUCCESS('‚úÖ –í–∏–ø—Ä–∞–≤–ª–µ–Ω–Ω—è –∑–∞–≤–µ—Ä—à–µ–Ω–æ!'))

    def clear_translations_cache(self):
        """–û—á–∏—â–µ–Ω–Ω—è –≤—Å—å–æ–≥–æ –∫–µ—à—É –ø–µ—Ä–µ–∫–ª–∞–¥—ñ–≤"""
        self.stdout.write('üßπ –û—á–∏—â–µ–Ω–Ω—è –∫–µ—à—É –ø–µ—Ä–µ–∫–ª–∞–¥—ñ–≤...')
        
        try:
            # –°–ø—Ä–æ–±—É—î–º–æ –æ—á–∏—Å—Ç–∏—Ç–∏ Redis –∫–µ—à
            from django_redis import get_redis_connection
            con = get_redis_connection("default")
            patterns = [
                "translations_*",
                "unified_translations_*", 
                "static_translations_*",
                "dynamic_translations_*"
            ]
            
            total_cleared = 0
            for pattern in patterns:
                keys = con.keys(pattern)
                if keys:
                    con.delete(*keys)
                    total_cleared += len(keys)
            
            self.stdout.write(f'   ‚úÖ –û—á–∏—â–µ–Ω–æ {total_cleared} –∫–ª—é—á—ñ–≤ Redis –∫–µ—à—É')
            
        except ImportError:
            # Fallback –¥–ª—è –ª–æ–∫–∞–ª—å–Ω–æ–≥–æ –∫–µ—à—É
            cache.clear()
            self.stdout.write('   ‚úÖ –û—á–∏—â–µ–Ω–æ –ª–æ–∫–∞–ª—å–Ω–∏–π –∫–µ—à')

    def fix_po_file(self, locale):
        """–í–∏–ø—Ä–∞–≤–ª–µ–Ω–Ω—è –ø–æ–º–∏–ª–æ–∫ –≤ .po —Ñ–∞–π–ª–∞—Ö"""
        self.stdout.write(f'üîß –í–∏–ø—Ä–∞–≤–ª–µ–Ω–Ω—è .po —Ñ–∞–π–ª—É –¥–ª—è {locale}...')
        
        po_file_path = os.path.join(
            settings.BASE_DIR, 'locale', locale, 'LC_MESSAGES', 'django.po'
        )
        
        if not os.path.exists(po_file_path):
            self.stdout.write(f'   ‚ö†Ô∏è –§–∞–π–ª –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ: {po_file_path}')
            return
        
        try:
            po = polib.pofile(po_file_path)
            fixed_count = 0
            
            # –í–∏–ø—Ä–∞–≤–ª—è—î–º–æ –º–µ—Ç–∞–¥–∞–Ω—ñ
            po.metadata['Language'] = locale
            po.metadata['Content-Type'] = 'text/plain; charset=UTF-8'
            
            # –í–∏–ø—Ä–∞–≤–ª—è—î–º–æ –ø—Ä–æ–±–ª–µ–º–Ω—ñ –∑–∞–ø–∏—Å–∏
            for entry in po:
                # –í–∏–¥–∞–ª—è—î–º–æ fuzzy flag –¥–ª—è –ø–µ—Ä–µ–≤—ñ—Ä–µ–Ω–∏—Ö –∑–∞–ø–∏—Å—ñ–≤
                if 'fuzzy' in entry.flags and entry.msgstr:
                    entry.flags.remove('fuzzy')
                    fixed_count += 1
                
                # –í–∏–¥–∞–ª—è—î–º–æ –ø–æ—Ä–æ–∂–Ω—ñ –ø–µ—Ä–µ–∫–ª–∞–¥–∏
                if not entry.msgstr.strip() and entry.msgid.strip():
                    entry.msgstr = entry.msgid  # Fallback –¥–æ –æ—Ä–∏–≥—ñ–Ω–∞–ª—å–Ω–æ–≥–æ —Ç–µ–∫—Å—Ç—É
                    fixed_count += 1
            
            # –ó–±–µ—Ä—ñ–≥–∞—î–º–æ —Ñ–∞–π–ª
            po.save()
            
            self.stdout.write(f'   ‚úÖ –í–∏–ø—Ä–∞–≤–ª–µ–Ω–æ {fixed_count} –∑–∞–ø–∏—Å—ñ–≤ —É {locale}')
            
        except Exception as e:
            self.stdout.write(f'   ‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –≤–∏–ø—Ä–∞–≤–ª–µ–Ω–Ω—ñ {locale}: {str(e)}')

    def export_static_translations(self, locale):
        """–ï–∫—Å–ø–æ—Ä—Ç —Å—Ç–∞—Ç–∏—á–Ω–∏—Ö –ø–µ—Ä–µ–∫–ª–∞–¥—ñ–≤"""
        self.stdout.write(f'üì§ –ï–∫—Å–ø–æ—Ä—Ç —Å—Ç–∞—Ç–∏—á–Ω–∏—Ö –ø–µ—Ä–µ–∫–ª–∞–¥—ñ–≤ –¥–ª—è {locale}...')
        
        # –°—Ç–≤–æ—Ä—é—î–º–æ –ø–∞–ø–∫—É –¥–ª—è —Å—Ç–∞—Ç–∏—á–Ω–∏—Ö –ø–µ—Ä–µ–∫–ª–∞–¥—ñ–≤
        static_dir = os.path.join(settings.BASE_DIR, 'static_translations')
        os.makedirs(static_dir, exist_ok=True)
        
        # –ë–∞–∑–æ–≤—ñ —Å—Ç–∞—Ç–∏—á–Ω—ñ –ø–µ—Ä–µ–∫–ª–∞–¥–∏
        static_translations = self.get_static_translations(locale)
        
        # –î–æ–¥–∞—î–º–æ –ø–µ—Ä–µ–∫–ª–∞–¥–∏ –∑ .po —Ñ–∞–π–ª—ñ–≤
        po_translations = self.get_po_translations(locale)
        static_translations.update(po_translations)
        
        # –ó–±–µ—Ä—ñ–≥–∞—î–º–æ —É JSON —Ñ–∞–π–ª
        output_file = os.path.join(static_dir, f'{locale}.json')
        with open(output_file, 'w', encoding='utf-8') as f:
            json.dump(static_translations, f, ensure_ascii=False, indent=2)
        
        self.stdout.write(f'   ‚úÖ –ï–∫—Å–ø–æ—Ä—Ç–æ–≤–∞–Ω–æ {len(static_translations)} –ø–µ—Ä–µ–∫–ª–∞–¥—ñ–≤ —É {output_file}')

    def get_static_translations(self, locale):
        """–û—Ç—Ä–∏–º–∞–Ω–Ω—è –±–∞–∑–æ–≤–∏—Ö —Å—Ç–∞—Ç–∏—á–Ω–∏—Ö –ø–µ—Ä–µ–∫–ª–∞–¥—ñ–≤"""
        if locale == 'en':
            return {
                # Header
                "header.company": "Company",
                "header.services": "Services",
                "header.projects": "Projects",
                "header.about": "About Us",
                "header.contact": "Contact",
                "header.careers": "Careers",
                
                # Navigation
                "nav.home": "Home",
                "nav.services": "Services",
                "nav.projects": "Projects",
                "nav.about": "About",
                "nav.contact": "Contact",
                "nav.menu": "Menu",
                
                # Common
                "common.loading": "Loading...",
                "common.error": "Error occurred",
                "common.success": "Success",
                "common.submit": "Submit",
                "common.cancel": "Cancel",
                "common.save": "Save",
                "common.edit": "Edit",
                "common.delete": "Delete",
                "common.search": "Search",
                "common.filter": "Filter",
                "common.reset": "Reset",
                "common.back": "Back",
                "common.next": "Next",
                "common.previous": "Previous",
                "common.close": "Close",
                "common.open": "Open",
                "common.show_more": "Show More",
                "common.show_less": "Show Less",
                
                # Footer
                "footer.company": "Company",
                "footer.services": "Services", 
                "footer.projects": "Projects",
                "footer.contact": "Contact",
                "footer.privacy": "Privacy Policy",
                "footer.terms": "Terms of Service",
                "footer.rights": "¬© 2024 All rights reserved",
                
                # Contact
                "contact.title": "Contact Us",
                "contact.subtitle": "Get in touch with our team",
                "contact.name": "Name",
                "contact.email": "Email",
                "contact.phone": "Phone",
                "contact.message": "Message",
                "contact.send": "Send Message",
                "contact.success": "Message sent successfully!",
                "contact.error": "Error sending message. Please try again.",
                
                # Forms
                "form.required": "This field is required",
                "form.invalid_email": "Please enter a valid email address",
                "form.invalid_phone": "Please enter a valid phone number",
                "form.min_length": "Minimum length is {{min}} characters",
                "form.max_length": "Maximum length is {{max}} characters",
            }
        else:  # uk
            return {
                # Header
                "header.company": "–ö–æ–º–ø–∞–Ω—ñ—è",
                "header.services": "–ü–æ—Å–ª—É–≥–∏",
                "header.projects": "–ü—Ä–æ–µ–∫—Ç–∏",
                "header.about": "–ü—Ä–æ –Ω–∞—Å",
                "header.contact": "–ö–æ–Ω—Ç–∞–∫—Ç–∏",
                "header.careers": "–ö–∞—Ä'—î—Ä–∞",
                
                # Navigation
                "nav.home": "–ì–æ–ª–æ–≤–Ω–∞",
                "nav.services": "–ü–æ—Å–ª—É–≥–∏",
                "nav.projects": "–ü—Ä–æ–µ–∫—Ç–∏",
                "nav.about": "–ü—Ä–æ –Ω–∞—Å",
                "nav.contact": "–ö–æ–Ω—Ç–∞–∫—Ç–∏",
                "nav.menu": "–ú–µ–Ω—é",
                
                # Common
                "common.loading": "–ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è...",
                "common.error": "–°—Ç–∞–ª–∞—Å—è –ø–æ–º–∏–ª–∫–∞",
                "common.success": "–£—Å–ø—ñ—à–Ω–æ",
                "common.submit": "–í—ñ–¥–ø—Ä–∞–≤–∏—Ç–∏",
                "common.cancel": "–°–∫–∞—Å—É–≤–∞—Ç–∏",
                "common.save": "–ó–±–µ—Ä–µ–≥—Ç–∏",
                "common.edit": "–†–µ–¥–∞–≥—É–≤–∞—Ç–∏",
                "common.delete": "–í–∏–¥–∞–ª–∏—Ç–∏",
                "common.search": "–ü–æ—à—É–∫",
                "common.filter": "–§—ñ–ª—å—Ç—Ä",
                "common.reset": "–°–∫–∏–Ω—É—Ç–∏",
                "common.back": "–ù–∞–∑–∞–¥",
                "common.next": "–î–∞–ª—ñ",
                "common.previous": "–ü–æ–ø–µ—Ä–µ–¥–Ω—ñ–π",
                "common.close": "–ó–∞–∫—Ä–∏—Ç–∏",
                "common.open": "–í—ñ–¥–∫—Ä–∏—Ç–∏",
                "common.show_more": "–ü–æ–∫–∞–∑–∞—Ç–∏ –±—ñ–ª—å—à–µ",
                "common.show_less": "–ü–æ–∫–∞–∑–∞—Ç–∏ –º–µ–Ω—à–µ",
                
                # Footer
                "footer.company": "–ö–æ–º–ø–∞–Ω—ñ—è",
                "footer.services": "–ü–æ—Å–ª—É–≥–∏",
                "footer.projects": "–ü—Ä–æ–µ–∫—Ç–∏",
                "footer.contact": "–ö–æ–Ω—Ç–∞–∫—Ç–∏",
                "footer.privacy": "–ü–æ–ª—ñ—Ç–∏–∫–∞ –∫–æ–Ω—Ñ—ñ–¥–µ–Ω—Ü—ñ–π–Ω–æ—Å—Ç—ñ",
                "footer.terms": "–£–º–æ–≤–∏ –≤–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è",
                "footer.rights": "¬© 2024 –í—Å—ñ –ø—Ä–∞–≤–∞ –∑–∞—Ö–∏—â–µ–Ω—ñ",
                
                # Contact
                "contact.title": "–ó–≤'—è–∂—ñ—Ç—å—Å—è –∑ –Ω–∞–º–∏",
                "contact.subtitle": "–ó–≤–µ—Ä—Ç–∞–π—Ç–µ—Å—è –¥–æ –Ω–∞—à–æ—ó –∫–æ–º–∞–Ω–¥–∏",
                "contact.name": "–Ü–º'—è",
                "contact.email": "Email",
                "contact.phone": "–¢–µ–ª–µ—Ñ–æ–Ω",
                "contact.message": "–ü–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è",
                "contact.send": "–í—ñ–¥–ø—Ä–∞–≤–∏—Ç–∏ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è",
                "contact.success": "–ü–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è —É—Å–ø—ñ—à–Ω–æ –≤—ñ–¥–ø—Ä–∞–≤–ª–µ–Ω–æ!",
                "contact.error": "–ü–æ–º–∏–ª–∫–∞ –≤—ñ–¥–ø—Ä–∞–≤–∫–∏. –°–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑.",
                
                # Forms
                "form.required": "–¶–µ –ø–æ–ª–µ –æ–±–æ–≤'—è–∑–∫–æ–≤–µ",
                "form.invalid_email": "–í–≤–µ–¥—ñ—Ç—å –∫–æ—Ä–µ–∫—Ç–Ω—É email –∞–¥—Ä–µ—Å—É",
                "form.invalid_phone": "–í–≤–µ–¥—ñ—Ç—å –∫–æ—Ä–µ–∫—Ç–Ω–∏–π –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω—É",
                "form.min_length": "–ú—ñ–Ω—ñ–º–∞–ª—å–Ω–∞ –¥–æ–≤–∂–∏–Ω–∞ {{min}} —Å–∏–º–≤–æ–ª—ñ–≤",
                "form.max_length": "–ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞ –¥–æ–≤–∂–∏–Ω–∞ {{max}} —Å–∏–º–≤–æ–ª—ñ–≤",
            }

    def get_po_translations(self, locale):
        """–û—Ç—Ä–∏–º–∞–Ω–Ω—è –ø–µ—Ä–µ–∫–ª–∞–¥—ñ–≤ –∑ .po —Ñ–∞–π–ª—ñ–≤"""
        po_file_path = os.path.join(
            settings.BASE_DIR, 'locale', locale, 'LC_MESSAGES', 'django.po'
        )
        
        translations = {}
        
        if os.path.exists(po_file_path):
            try:
                po = polib.pofile(po_file_path)
                for entry in po:
                    if entry.msgstr and not entry.obsolete:
                        # –°—Ç–≤–æ—Ä—é—î–º–æ –∫–ª—é—á —É —Ñ–æ—Ä–º–∞—Ç—ñ po.original_text
                        key = f"po.{entry.msgid.strip()}"
                        translations[key] = entry.msgstr
            except Exception as e:
                self.stdout.write(f'   ‚ö†Ô∏è –ü–æ–º–∏–ª–∫–∞ —á–∏—Ç–∞–Ω–Ω—è .po —Ñ–∞–π–ª—É: {str(e)}')
        
        return translations

    def validate_translations(self, locale):
        """–í–∞–ª—ñ–¥–∞—Ü—ñ—è –ø–µ—Ä–µ–∫–ª–∞–¥—ñ–≤"""
        self.stdout.write(f'‚úÖ –í–∞–ª—ñ–¥–∞—Ü—ñ—è –ø–µ—Ä–µ–∫–ª–∞–¥—ñ–≤ –¥–ª—è {locale}...')
        
        errors = []
        warnings = []
        
        # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —Å—Ç–∞—Ç–∏—á–Ω—ñ –ø–µ—Ä–µ–∫–ª–∞–¥–∏
        static_file = os.path.join(settings.BASE_DIR, 'static_translations', f'{locale}.json')
        if os.path.exists(static_file):
            try:
                with open(static_file, 'r', encoding='utf-8') as f:
                    data = json.load(f)
                
                # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ –Ω–∞ –ø–æ—Ä–æ–∂–Ω—ñ –∑–Ω–∞—á–µ–Ω–Ω—è
                for key, value in data.items():
                    if not value or (isinstance(value, str) and not value.strip()):
                        errors.append(f"–ü–æ—Ä–æ–∂–Ω—î –∑–Ω–∞—á–µ–Ω–Ω—è –¥–ª—è –∫–ª—é—á–∞: {key}")
                
                self.stdout.write(f'   üìÑ –°—Ç–∞—Ç–∏—á–Ω—ñ –ø–µ—Ä–µ–∫–ª–∞–¥–∏: {len(data)} –∫–ª—é—á—ñ–≤')
                
            except json.JSONDecodeError as e:
                errors.append(f"–ü–æ–º–∏–ª–∫–∞ JSON —É —Å—Ç–∞—Ç–∏—á–Ω–∏—Ö –ø–µ—Ä–µ–∫–ª–∞–¥–∞—Ö: {str(e)}")
        else:
            warnings.append(f"–§–∞–π–ª —Å—Ç–∞—Ç–∏—á–Ω–∏—Ö –ø–µ—Ä–µ–∫–ª–∞–¥—ñ–≤ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ: {static_file}")
        
        # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ .po —Ñ–∞–π–ª–∏
        po_file_path = os.path.join(
            settings.BASE_DIR, 'locale', locale, 'LC_MESSAGES', 'django.po'
        )
        
        if os.path.exists(po_file_path):
            try:
                po = polib.pofile(po_file_path)
                fuzzy_count = len([e for e in po if 'fuzzy' in e.flags])
                untranslated_count = len([e for e in po if not e.msgstr])
                
                self.stdout.write(f'   üìù PO –ø–µ—Ä–µ–∫–ª–∞–¥–∏: {len(po)} –∑–∞–ø–∏—Å—ñ–≤')
                
                if fuzzy_count > 0:
                    warnings.append(f"–ó–Ω–∞–π–¥–µ–Ω–æ {fuzzy_count} fuzzy –∑–∞–ø–∏—Å—ñ–≤")
                
                if untranslated_count > 0:
                    warnings.append(f"–ó–Ω–∞–π–¥–µ–Ω–æ {untranslated_count} –Ω–µ–ø–µ—Ä–µ–∫–ª–∞–¥–µ–Ω–∏—Ö –∑–∞–ø–∏—Å—ñ–≤")
                    
            except Exception as e:
                errors.append(f"–ü–æ–º–∏–ª–∫–∞ —á–∏—Ç–∞–Ω–Ω—è .po —Ñ–∞–π–ª—É: {str(e)}")
        else:
            errors.append(f"PO —Ñ–∞–π–ª –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ: {po_file_path}")
        
        # –í–∏–≤–æ–¥–∏–º–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∏
        if errors:
            self.stdout.write(f'   ‚ùå –ó–Ω–∞–π–¥–µ–Ω–æ {len(errors)} –ø–æ–º–∏–ª–æ–∫:')
            for error in errors:
                self.stdout.write(f'     - {error}')
        
        if warnings:
            self.stdout.write(f'   ‚ö†Ô∏è –ó–Ω–∞–π–¥–µ–Ω–æ {len(warnings)} –ø–æ–ø–µ—Ä–µ–¥–∂–µ–Ω—å:')
            for warning in warnings:
                self.stdout.write(f'     - {warning}')
        
        if not errors and not warnings:
            self.stdout.write(f'   ‚úÖ –ü–µ—Ä–µ–∫–ª–∞–¥–∏ –¥–ª—è {locale} –≤–∞–ª—ñ–¥–Ω—ñ')
        
        return len(errors) == 0
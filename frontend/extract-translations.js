const fs = require('fs-extra');
const path = require('path');
const fg = require('fast-glob');

const sourceDir = './src';
const localesDir = './public/locales';
const defaultLocale = 'uk';
const targetLocales = ['uk', 'en'];

// –ü–æ–∫—Ä–∞—â–µ–Ω—ñ —Ä–µ–≥—É–ª—è—Ä–Ω—ñ –≤–∏—Ä–∞–∑–∏ –¥–ª—è –ø–æ—à—É–∫—É —Ç–µ–∫—Å—Ç—ñ–≤
const translationPatterns = {
  // t('key', 'fallback')
  tFunction: /t\s*\(\s*['"`]([^'"`]+)['"`]\s*,\s*['"`]([^'"`]+)['"`]/g,
  // {t('key', 'fallback')}
  jsxTFunction: /\{t\s*\(\s*['"`]([^'"`]+)['"`]\s*,\s*['"`]([^'"`]+)['"`]\)\}/g,
  // –ü—Ä—è–º–∏–π —Ç–µ–∫—Å—Ç –≤ JSX
  jsxText: />([^<>{}`]+)</g,
  // title="text", placeholder="text" —Ç–æ—â–æ
  attributes: /(?:title|placeholder|alt|aria-label)=["']([^"']+)["']/g
};

function normalizeKey(text) {
  return text
    .trim()
    .toLowerCase()
    .replace(/[^\u0400-\u04FFa-z0-9]+/g, '_') // –ó–±–µ—Ä—ñ–≥–∞—î–º–æ –∫–∏—Ä–∏–ª–∏—Ü—é
    .replace(/^_+|_+$/g, '')
    .substring(0, 50); // –ó–±—ñ–ª—å—à—É—î–º–æ –º–∞–∫—Å–∏–º–∞–ª—å–Ω—É –¥–æ–≤–∂–∏–Ω—É
}

function isValidText(text) {
  if (!text || typeof text !== 'string') return false;
  
  const trimmed = text.trim();
  
  // –ü—Ä–æ–ø—É—Å–∫–∞—î–º–æ:
  if (!trimmed) return false;
  if (/^[0-9\s\-+.,]+$/.test(trimmed)) return false; // –¢—ñ–ª—å–∫–∏ —á–∏—Å–ª–∞
  if (/^[{}\[\]()]+$/.test(trimmed)) return false; // –¢—ñ–ª—å–∫–∏ –¥—É–∂–∫–∏
  if (trimmed.length < 2) return false; // –ó–∞–Ω–∞–¥—Ç–æ –∫–æ—Ä–æ—Ç–∫—ñ
  if (trimmed.length > 200) return false; // –ó–∞–Ω–∞–¥—Ç–æ –¥–æ–≤–≥—ñ
  if (/^(true|false|null|undefined)$/.test(trimmed)) return false; // JS –∑–Ω–∞—á–µ–Ω–Ω—è
  if (/^[A-Z_]+$/.test(trimmed)) return false; // –ö–æ–Ω—Å—Ç–∞–Ω—Ç–∏
  if (/\.(js|jsx|ts|tsx|css|scss)$/.test(trimmed)) return false; // –Ü–º–µ–Ω–∞ —Ñ–∞–π–ª—ñ–≤
  
  return true;
}

function extractTranslationsFromContent(content, filePath) {
  const translations = new Map();
  
  // 1. –í–∏—Ç—è–≥—É—î–º–æ –∑ t() —Ñ—É–Ω–∫—Ü—ñ–π
  let match;
  while ((match = translationPatterns.tFunction.exec(content)) !== null) {
    const [_, key, fallback] = match;
    if (isValidText(fallback)) {
      translations.set(key, fallback);
    }
  }
  
  // 2. –í–∏—Ç—è–≥—É—î–º–æ –∑ JSX t() —Ñ—É–Ω–∫—Ü—ñ–π
  content.replace(translationPatterns.jsxTFunction, (full, key, fallback) => {
    if (isValidText(fallback)) {
      translations.set(key, fallback);
    }
    return full;
  });
  
  // 3. –í–∏—Ç—è–≥—É—î–º–æ —Ç–µ–∫—Å—Ç –∑ JSX (–æ–ø—Ü—ñ–æ–Ω–∞–ª—å–Ω–æ, –º–æ–∂–Ω–∞ –≤–∏–º–∫–Ω—É—Ç–∏)
  if (filePath.includes('/components/') || filePath.includes('/app/')) {
    content.replace(translationPatterns.jsxText, (full, text) => {
      if (isValidText(text)) {
        const key = normalizeKey(text);
        translations.set(key, text);
      }
      return full;
    });
  }
  
  // 4. –í–∏—Ç—è–≥—É—î–º–æ –∑ –∞—Ç—Ä–∏–±—É—Ç—ñ–≤
  content.replace(translationPatterns.attributes, (full, text) => {
    if (isValidText(text)) {
      const key = normalizeKey(text);
      translations.set(key, text);
    }
    return full;
  });
  
  return translations;
}

async function mergeWithExisting(locale, newTranslations) {
  const localeFile = path.join(localesDir, locale, 'common.json');
  let existingTranslations = {};
  
  try {
    await fs.ensureFile(localeFile);
    existingTranslations = await fs.readJson(localeFile, { throws: false }) || {};
  } catch (error) {
    console.warn(`–ù–µ –≤–¥–∞–ª–æ—Å—è –ø—Ä–æ—á–∏—Ç–∞—Ç–∏ —ñ—Å–Ω—É—é—á—ñ –ø–µ—Ä–µ–∫–ª–∞–¥–∏ –¥–ª—è ${locale}:`, error.message);
  }
  
  // –û–±'—î–¥–Ω—É—î–º–æ –∑ –ø—Ä—ñ–æ—Ä–∏—Ç–µ—Ç–æ–º —ñ—Å–Ω—É—é—á–∏—Ö –ø–µ—Ä–µ–∫–ª–∞–¥—ñ–≤
  const merged = { ...existingTranslations };
  
  for (const [key, value] of newTranslations.entries()) {
    if (!merged[key]) {
      // –î–ª—è –∞–Ω–≥–ª—ñ–π—Å—å–∫–æ—ó –º–æ–≤–∏ –∑–±–µ—Ä—ñ–≥–∞—î–º–æ —É–∫—Ä–∞—ó–Ω—Å—å–∫–µ –∑–Ω–∞—á–µ–Ω–Ω—è —è–∫ –∑–∞–≥–ª—É—à–∫—É
      merged[key] = locale === 'en' ? `[UK: ${value}]` : value;
    }
  }
  
  return merged;
}

async function extractTranslations() {
  console.log('üöÄ –ü–æ—á–∞—Ç–æ–∫ –≤–∏—Ç—è–≥—É–≤–∞–Ω–Ω—è –ø–µ—Ä–µ–∫–ª–∞–¥—ñ–≤...\n');
  
  const files = await fg([
    `${sourceDir}/app/**/*.{js,jsx,ts,tsx}`,
    `${sourceDir}/components/**/*.{js,jsx,ts,tsx}`,
    `!${sourceDir}/**/*.test.{js,jsx,ts,tsx}`,
    `!${sourceDir}/**/*.spec.{js,jsx,ts,tsx}`
  ]);
  
  console.log(`üìÅ –ó–Ω–∞–π–¥–µ–Ω–æ ${files.length} —Ñ–∞–π–ª—ñ–≤ –¥–ª—è –æ–±—Ä–æ–±–∫–∏\n`);
  
  const allTranslations = new Map();
  const fileStats = [];
  
  // –û–±—Ä–æ–±–ª—è—î–º–æ —Ñ–∞–π–ª–∏
  for (const file of files) {
    try {
      const content = await fs.readFile(file, 'utf-8');
      const translations = extractTranslationsFromContent(content, file);
      
      if (translations.size > 0) {
        fileStats.push({
          file: file.replace(sourceDir, '.'),
          count: translations.size
        });
        
        // –î–æ–¥–∞—î–º–æ –¥–æ –∑–∞–≥–∞–ª—å–Ω–æ—ó –º–∞–ø–∏
        for (const [key, value] of translations) {
          allTranslations.set(key, value);
        }
      }
    } catch (error) {
      console.error(`‚ùå –ü–æ–º–∏–ª–∫–∞ –æ–±—Ä–æ–±–∫–∏ ${file}:`, error.message);
    }
  }
  
  // –í–∏–≤–æ–¥–∏–º–æ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
  console.log('üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ —Ñ–∞–π–ª–∞—Ö:');
  fileStats
    .sort((a, b) => b.count - a.count)
    .slice(0, 10)
    .forEach(({ file, count }) => {
      console.log(`   ${file}: ${count} —Ç–µ–∫—Å—Ç—ñ–≤`);
    });
  
  console.log(`\nüìù –í—Å—å–æ–≥–æ —É–Ω—ñ–∫–∞–ª—å–Ω–∏—Ö –ø–µ—Ä–µ–∫–ª–∞–¥—ñ–≤: ${allTranslations.size}\n`);
  
  // –ó–±–µ—Ä—ñ–≥–∞—î–º–æ –¥–ª—è –∫–æ–∂–Ω–æ—ó –ª–æ–∫–∞–ª—ñ
  for (const locale of targetLocales) {
    const merged = await mergeWithExisting(locale, allTranslations);
    const localeFile = path.join(localesDir, locale, 'common.json');
    
    // –°–æ—Ä—Ç—É—î–º–æ –∫–ª—é—á—ñ –¥–ª—è –∫—Ä–∞—â–æ—ó —á–∏—Ç–∞–±–µ–ª—å–Ω–æ—Å—Ç—ñ
    const sorted = Object.keys(merged)
      .sort()
      .reduce((acc, key) => {
        acc[key] = merged[key];
        return acc;
      }, {});
    
    await fs.writeJson(localeFile, sorted, { spaces: 2 });
    console.log(`‚úÖ –ó–±–µ—Ä–µ–∂–µ–Ω–æ ${Object.keys(sorted).length} –ø–µ—Ä–µ–∫–ª–∞–¥—ñ–≤ –¥–ª—è ${locale} ‚Üí ${localeFile}`);
  }
  
  console.log('\nüéâ –í–∏—Ç—è–≥—É–≤–∞–Ω–Ω—è –ø–µ—Ä–µ–∫–ª–∞–¥—ñ–≤ –∑–∞–≤–µ—Ä—à–µ–Ω–æ!');
}

// –î–æ–¥–∞—Ç–∫–æ–≤–∞ —Ñ—É–Ω–∫—Ü—ñ—è –¥–ª—è —Å–∏–Ω—Ö—Ä–æ–Ω—ñ–∑–∞—Ü—ñ—ó –∑ backend
async function syncWithBackend() {
  const backendTranslationsPath = path.join(__dirname, '../../backend/translations/uk.json');
  
  try {
    const backendTranslations = await fs.readJson(backendTranslationsPath);
    const frontendTranslations = await fs.readJson(path.join(localesDir, 'uk', 'common.json'));
    
    // –û–±'—î–¥–Ω—É—î–º–æ –ø–µ—Ä–µ–∫–ª–∞–¥–∏
    const combined = { ...frontendTranslations, ...backendTranslations };
    
    // –ó–±–µ—Ä—ñ–≥–∞—î–º–æ –æ–Ω–æ–≤–ª–µ–Ω—ñ –ø–µ—Ä–µ–∫–ª–∞–¥–∏
    await fs.writeJson(
      path.join(localesDir, 'uk', 'common.json'), 
      combined, 
      { spaces: 2 }
    );
    
    console.log(`\nüîÑ –°–∏–Ω—Ö—Ä–æ–Ω—ñ–∑–æ–≤–∞–Ω–æ ${Object.keys(backendTranslations).length} –ø–µ—Ä–µ–∫–ª–∞–¥—ñ–≤ –∑ backend`);
  } catch (error) {
    console.warn('‚ö†Ô∏è  –ù–µ –≤–¥–∞–ª–æ—Å—è —Å–∏–Ω—Ö—Ä–æ–Ω—ñ–∑—É–≤–∞—Ç–∏ –∑ backend:', error.message);
  }
}

// –ì–æ–ª–æ–≤–Ω–∞ —Ñ—É–Ω–∫—Ü—ñ—è
async function main() {
  try {
    await extractTranslations();
    
    // –û–ø—Ü—ñ–æ–Ω–∞–ª—å–Ω–æ: —Å–∏–Ω—Ö—Ä–æ–Ω—ñ–∑–∞—Ü—ñ—è –∑ backend
    if (process.argv.includes('--sync-backend')) {
      await syncWithBackend();
    }
  } catch (error) {
    console.error('‚ùå –ö—Ä–∏—Ç–∏—á–Ω–∞ –ø–æ–º–∏–ª–∫–∞:', error);
    process.exit(1);
  }
}

// –ó–∞–ø—É—Å–∫–∞—î–º–æ —Å–∫—Ä–∏–ø—Ç
main();
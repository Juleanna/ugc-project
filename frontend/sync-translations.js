// sync-translations.js - –°–∫—Ä–∏–ø—Ç –¥–ª—è —Å–∏–Ω—Ö—Ä–æ–Ω—ñ–∑–∞—Ü—ñ—ó –ø–µ—Ä–µ–∫–ª–∞–¥—ñ–≤ –º—ñ–∂ –º–æ–≤–∞–º–∏

const fs = require('fs')
const path = require('path')

// –ö–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—è
const CONFIG = {
  localesDir: 'frontend/public/locales',
  baseLocale: 'uk',  // –û—Å–Ω–æ–≤–Ω–∞ –º–æ–≤–∞ (–µ—Ç–∞–ª–æ–Ω)
  targetLocales: ['en', 'ru'], // –ú–æ–≤–∏ –¥–ª—è —Å–∏–Ω—Ö—Ä–æ–Ω—ñ–∑–∞—Ü—ñ—ó
  backupDir: 'translation-backups',
  
  // –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è —Å–∏–Ω—Ö—Ä–æ–Ω—ñ–∑–∞—Ü—ñ—ó
  options: {
    createMissingFiles: true,      // –°—Ç–≤–æ—Ä—é–≤–∞—Ç–∏ –≤—ñ–¥—Å—É—Ç–Ω—ñ —Ñ–∞–π–ª–∏
    addMissingKeys: true,          // –î–æ–¥–∞–≤–∞—Ç–∏ –≤—ñ–¥—Å—É—Ç–Ω—ñ –∫–ª—é—á—ñ
    removeExtraKeys: false,        // –í–∏–¥–∞–ª—è—Ç–∏ –∑–∞–π–≤—ñ –∫–ª—é—á—ñ (–æ–±–µ—Ä–µ–∂–Ω–æ!)
    preserveExisting: true,        // –ó–±–µ—Ä—ñ–≥–∞—Ç–∏ —ñ—Å–Ω—É—é—á—ñ –ø–µ—Ä–µ–∫–ª–∞–¥–∏
    useAutoTranslate: false,       // –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–≤–∞—Ç–∏ –∞–≤—Ç–æ–ø–µ—Ä–µ–∫–ª–∞–¥
    createBackup: true,            // –°—Ç–≤–æ—Ä—é–≤–∞—Ç–∏ backup –ø–µ—Ä–µ–¥ –∑–º—ñ–Ω–∞–º–∏
    sortKeys: true,                // –°–æ—Ä—Ç—É–≤–∞—Ç–∏ –∫–ª—é—á—ñ –≤ –∞–ª—Ñ–∞–≤—ñ—Ç–Ω–æ–º—É –ø–æ—Ä—è–¥–∫—É
  }
}

// –£—Ç–∏–ª—ñ—Ç–∞—Ä–Ω—ñ —Ñ—É–Ω–∫—Ü—ñ—ó
class TranslationUtils {
  static createBackup() {
    if (!CONFIG.options.createBackup) return
    
    const timestamp = new Date().toISOString().replace(/[:.]/g, '-')
    const backupPath = path.join(CONFIG.backupDir, timestamp)
    
    if (fs.existsSync(CONFIG.localesDir)) {
      fs.mkdirSync(backupPath, { recursive: true })
      this.copyDirectory(CONFIG.localesDir, backupPath)
      console.log(`üíæ Backup —Å—Ç–≤–æ—Ä–µ–Ω–æ: ${backupPath}`)
    }
  }
  
  static copyDirectory(src, dest) {
    fs.mkdirSync(dest, { recursive: true })
    const entries = fs.readdirSync(src, { withFileTypes: true })
    
    entries.forEach(entry => {
      const srcPath = path.join(src, entry.name)
      const destPath = path.join(dest, entry.name)
      
      if (entry.isDirectory()) {
        this.copyDirectory(srcPath, destPath)
      } else {
        fs.copyFileSync(srcPath, destPath)
      }
    })
  }
  
  static getAllKeys(obj, prefix = '') {
    let keys = []
    
    for (const key in obj) {
      const fullKey = prefix ? `${prefix}.${key}` : key
      
      if (typeof obj[key] === 'object' && obj[key] !== null && !Array.isArray(obj[key])) {
        keys.push(...this.getAllKeys(obj[key], fullKey))
      } else {
        keys.push(fullKey)
      }
    }
    
    return keys
  }
  
  static setNestedValue(obj, keyPath, value) {
    const keys = keyPath.split('.')
    let current = obj
    
    for (let i = 0; i < keys.length - 1; i++) {
      if (!current[keys[i]] || typeof current[keys[i]] !== 'object') {
        current[keys[i]] = {}
      }
      current = current[keys[i]]
    }
    
    current[keys[keys.length - 1]] = value
  }
  
  static getNestedValue(obj, keyPath) {
    const keys = keyPath.split('.')
    let current = obj
    
    for (const key of keys) {
      if (current && typeof current === 'object' && key in current) {
        current = current[key]
      } else {
        return undefined
      }
    }
    
    return current
  }
  
  static sortObjectKeys(obj) {
    if (typeof obj !== 'object' || obj === null || Array.isArray(obj)) {
      return obj
    }
    
    const sorted = {}
    const keys = Object.keys(obj).sort()
    
    keys.forEach(key => {
      sorted[key] = this.sortObjectKeys(obj[key])
    })
    
    return sorted
  }
  
  static generatePlaceholderTranslation(key, baseValue, targetLocale) {
    // –ì–µ–Ω–µ—Ä—É—î placeholder –ø–µ—Ä–µ–∫–ª–∞–¥ –¥–ª—è –≤—ñ–¥—Å—É—Ç–Ω—ñ—Ö –∫–ª—é—á—ñ–≤
    
    if (CONFIG.options.useAutoTranslate) {
      // –¢—É—Ç –º–æ–∂–Ω–∞ —ñ–Ω—Ç–µ–≥—Ä—É–≤–∞—Ç–∏ Google Translate API –∞–±–æ —ñ–Ω—à–∏–π —Å–µ—Ä–≤—ñ—Å
      return this.autoTranslate(baseValue, CONFIG.baseLocale, targetLocale)
    }
    
    // –ü—Ä–æ—Å—Ç–∏–π placeholder
    if (typeof baseValue === 'string') {
      return `[${targetLocale.toUpperCase()}] ${baseValue}`
    }
    
    return baseValue
  }
  
  static async autoTranslate(text, fromLang, toLang) {
    // –ó–∞–≥–ª—É—à–∫–∞ –¥–ª—è –∞–≤—Ç–æ–ø–µ—Ä–µ–∫–ª–∞–¥—É
    // –í —Ä–µ–∞–ª—å–Ω–æ–º—É –ø—Ä–æ–µ–∫—Ç—ñ —Ç—É—Ç –º–æ–∂–µ –±—É—Ç–∏ —ñ–Ω—Ç–µ–≥—Ä–∞—Ü—ñ—è –∑ Google Translate API
    
    const translations = {
      'uk-en': {
        '–ó–±–µ—Ä–µ–≥—Ç–∏': 'Save',
        '–°–∫–∞—Å—É–≤–∞—Ç–∏': 'Cancel',
        '–í–∏–¥–∞–ª–∏—Ç–∏': 'Delete',
        '–†–µ–¥–∞–≥—É–≤–∞—Ç–∏': 'Edit',
        '–ì–æ–ª–æ–≤–Ω–∞': 'Home',
        '–ü—Ä–æ –Ω–∞—Å': 'About',
        '–ö–æ–Ω—Ç–∞–∫—Ç–∏': 'Contact',
        '–£–≤—ñ–π—Ç–∏': 'Sign In',
        '–†–µ—î—Å—Ç—Ä–∞—Ü—ñ—è': 'Sign Up'
      },
      'uk-ru': {
        '–ó–±–µ—Ä–µ–≥—Ç–∏': '–°–æ—Ö—Ä–∞–Ω–∏—Ç—å',
        '–°–∫–∞—Å—É–≤–∞—Ç–∏': '–û—Ç–º–µ–Ω–∏—Ç—å',
        '–í–∏–¥–∞–ª–∏—Ç–∏': '–£–¥–∞–ª–∏—Ç—å',
        '–†–µ–¥–∞–≥—É–≤–∞—Ç–∏': '–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å',
        '–ì–æ–ª–æ–≤–Ω–∞': '–ì–ª–∞–≤–Ω–∞—è',
        '–ü—Ä–æ –Ω–∞—Å': '–û –Ω–∞—Å',
        '–ö–æ–Ω—Ç–∞–∫—Ç–∏': '–ö–æ–Ω—Ç–∞–∫—Ç—ã',
        '–£–≤—ñ–π—Ç–∏': '–í–æ–π—Ç–∏',
        '–†–µ—î—Å—Ç—Ä–∞—Ü—ñ—è': '–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è'
      }
    }
    
    const translationKey = `${fromLang}-${toLang}`
    return translations[translationKey]?.[text] || `[${toLang.toUpperCase()}] ${text}`
  }
}

// –û—Å–Ω–æ–≤–Ω–∏–π –∫–ª–∞—Å —Å–∏–Ω—Ö—Ä–æ–Ω—ñ–∑–∞—Ü—ñ—ó
class TranslationSynchronizer {
  constructor() {
    this.baseTranslations = {}
    this.targetTranslations = {}
    this.changes = {
      filesCreated: [],
      keysAdded: [],
      keysRemoved: [],
      keysUpdated: []
    }
  }
  
  async synchronize() {
    console.log('üîÑ –ü–æ—á–∞—Ç–æ–∫ —Å–∏–Ω—Ö—Ä–æ–Ω—ñ–∑–∞—Ü—ñ—ó –ø–µ—Ä–µ–∫–ª–∞–¥—ñ–≤...\n')
    
    // –°—Ç–≤–æ—Ä—é—î–º–æ backup
    TranslationUtils.createBackup()
    
    // –ó–∞–≤–∞–Ω—Ç–∞–∂—É—î–º–æ –±–∞–∑–æ–≤—ñ –ø–µ—Ä–µ–∫–ª–∞–¥–∏
    this.loadBaseTranslations()
    
    // –°–∏–Ω—Ö—Ä–æ–Ω—ñ–∑—É—î–º–æ –∫–æ–∂–Ω—É —Ü—ñ–ª—å–æ–≤—É –º–æ–≤—É
    for (const targetLocale of CONFIG.targetLocales) {
      console.log(`üåê –°–∏–Ω—Ö—Ä–æ–Ω—ñ–∑–∞—Ü—ñ—è: ${CONFIG.baseLocale} ‚Üí ${targetLocale}`)
      await this.synchronizeLocale(targetLocale)
      console.log('')
    }
    
    // –í–∏–≤–æ–¥–∏–º–æ –ø—ñ–¥—Å—É–º–æ–∫
    this.printSummary()
  }
  
  loadBaseTranslations() {
    console.log(`üìñ –ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –±–∞–∑–æ–≤–∏—Ö –ø–µ—Ä–µ–∫–ª–∞–¥—ñ–≤ (${CONFIG.baseLocale})...`)
    
    const baseDir = path.join(CONFIG.localesDir, CONFIG.baseLocale)
    
    if (!fs.existsSync(baseDir)) {
      throw new Error(`–ë–∞–∑–æ–≤–∞ –¥–∏—Ä–µ–∫—Ç–æ—Ä—ñ—è –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–∞: ${baseDir}`)
    }
    
    const files = fs.readdirSync(baseDir).filter(file => file.endsWith('.json'))
    
    files.forEach(file => {
      const filePath = path.join(baseDir, file)
      const namespace = file.replace('.json', '')
      
      try {
        this.baseTranslations[namespace] = JSON.parse(fs.readFileSync(filePath, 'utf8'))
        console.log(`   ‚úÖ ${namespace}: ${TranslationUtils.getAllKeys(this.baseTranslations[namespace]).length} –∫–ª—é—á—ñ–≤`)
      } catch (error) {
        console.log(`   ‚ùå –ü–æ–º–∏–ª–∫–∞ —á–∏—Ç–∞–Ω–Ω—è ${file}: ${error.message}`)
      }
    })
  }
  
  async synchronizeLocale(targetLocale) {
    const targetDir = path.join(CONFIG.localesDir, targetLocale)
    
    // –°—Ç–≤–æ—Ä—é—î–º–æ –¥–∏—Ä–µ–∫—Ç–æ—Ä—ñ—é —è–∫—â–æ –Ω–µ —ñ—Å–Ω—É—î
    if (!fs.existsSync(targetDir)) {
      fs.mkdirSync(targetDir, { recursive: true })
      console.log(`   üìÅ –°—Ç–≤–æ—Ä–µ–Ω–æ –¥–∏—Ä–µ–∫—Ç–æ—Ä—ñ—é: ${targetDir}`)
    }
    
    // –°–∏–Ω—Ö—Ä–æ–Ω—ñ–∑—É—î–º–æ –∫–æ–∂–µ–Ω namespace
    for (const namespace of Object.keys(this.baseTranslations)) {
      await this.synchronizeNamespace(namespace, targetLocale, targetDir)
    }
  }
  
  async synchronizeNamespace(namespace, targetLocale, targetDir) {
    const targetFile = path.join(targetDir, `${namespace}.json`)
    const baseData = this.baseTranslations[namespace]
    let targetData = {}
    
    // –ó–∞–≤–∞–Ω—Ç–∞–∂—É—î–º–æ —ñ—Å–Ω—É—é—á—ñ –ø–µ—Ä–µ–∫–ª–∞–¥–∏
    if (fs.existsSync(targetFile)) {
      try {
        targetData = JSON.parse(fs.readFileSync(targetFile, 'utf8'))
      } catch (error) {
        console.log(`   ‚ö†Ô∏è  –ü–æ–º–∏–ª–∫–∞ —á–∏—Ç–∞–Ω–Ω—è ${namespace}.json: ${error.message}`)
        targetData = {}
      }
    } else if (CONFIG.options.createMissingFiles) {
      console.log(`   üìÑ –°—Ç–≤–æ—Ä—é—î–º–æ –Ω–æ–≤–∏–π —Ñ–∞–π–ª: ${namespace}.json`)
      this.changes.filesCreated.push(`${targetLocale}/${namespace}.json`)
    }
    
    // –û—Ç—Ä–∏–º—É—î–º–æ –≤—Å—ñ –∫–ª—é—á—ñ
    const baseKeys = TranslationUtils.getAllKeys(baseData)
    const targetKeys = TranslationUtils.getAllKeys(targetData)
    
    // –ó–Ω–∞—Ö–æ–¥–∏–º–æ –≤—ñ–¥—Å—É—Ç–Ω—ñ –∫–ª—é—á—ñ
    const missingKeys = baseKeys.filter(key => !targetKeys.includes(key))
    const extraKeys = targetKeys.filter(key => !baseKeys.includes(key))
    
    console.log(`   üìã ${namespace}: –±–∞–∑–∞=${baseKeys.length}, —Ü—ñ–ª—å=${targetKeys.length}, –≤—ñ–¥—Å—É—Ç–Ω—ñ=${missingKeys.length}, –∑–∞–π–≤—ñ=${extraKeys.length}`)
    
    // –î–æ–¥–∞—î–º–æ –≤—ñ–¥—Å—É—Ç–Ω—ñ –∫–ª—é—á—ñ
    if (CONFIG.options.addMissingKeys && missingKeys.length > 0) {
      for (const key of missingKeys) {
        const baseValue = TranslationUtils.getNestedValue(baseData, key.replace(`${namespace}.`, ''))
        const translatedValue = await TranslationUtils.generatePlaceholderTranslation(key, baseValue, targetLocale)
        
        TranslationUtils.setNestedValue(targetData, key.replace(`${namespace}.`, ''), translatedValue)
        this.changes.keysAdded.push(`${targetLocale}/${key}`)
      }
      
      console.log(`   ‚ûï –î–æ–¥–∞–Ω–æ ${missingKeys.length} –∫–ª—é—á—ñ–≤`)
    }
    
    // –í–∏–¥–∞–ª—è—î–º–æ –∑–∞–π–≤—ñ –∫–ª—é—á—ñ
    if (CONFIG.options.removeExtraKeys && extraKeys.length > 0) {
      // –†–µ–∞–ª—ñ–∑–∞—Ü—ñ—è –≤–∏–¥–∞–ª–µ–Ω–Ω—è –∑–∞–π–≤–∏—Ö –∫–ª—é—á—ñ–≤ (—Å–∫–ª–∞–¥–Ω—ñ—à–µ —á–µ—Ä–µ–∑ –≤–∫–ª–∞–¥–µ–Ω—ñ –æ–±'—î–∫—Ç–∏)
      console.log(`   ‚ö†Ô∏è  –ó–Ω–∞–π–¥–µ–Ω–æ ${extraKeys.length} –∑–∞–π–≤–∏—Ö –∫–ª—é—á—ñ–≤ (–≤–∏–¥–∞–ª–µ–Ω–Ω—è –≤–∏–º–∫–Ω–µ–Ω–æ)`)
    }
    
    // –°–æ—Ä—Ç—É—î–º–æ –∫–ª—é—á—ñ
    if (CONFIG.options.sortKeys) {
      targetData = TranslationUtils.sortObjectKeys(targetData)
    }
    
    // –ó–±–µ—Ä—ñ–≥–∞—î–º–æ —Ñ–∞–π–ª
    try {
      fs.writeFileSync(targetFile, JSON.stringify(targetData, null, 2), 'utf8')
      console.log(`   üíæ –ó–±–µ—Ä–µ–∂–µ–Ω–æ: ${namespace}.json`)
    } catch (error) {
      console.log(`   ‚ùå –ü–æ–º–∏–ª–∫–∞ –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—è: ${error.message}`)
    }
  }
  
  printSummary() {
    console.log('üìä –ü–Ü–î–°–£–ú–û–ö –°–ò–ù–•–†–û–ù–Ü–ó–ê–¶–Ü–á')
    console.log('‚ïê'.repeat(50))
    
    console.log(`üìÅ –§–∞–π–ª—ñ–≤ —Å—Ç–≤–æ—Ä–µ–Ω–æ: ${this.changes.filesCreated.length}`)
    this.changes.filesCreated.forEach(file => console.log(`   + ${file}`))
    
    console.log(`\n‚ûï –ö–ª—é—á—ñ–≤ –¥–æ–¥–∞–Ω–æ: ${this.changes.keysAdded.length}`)
    if (this.changes.keysAdded.length <= 20) {
      this.changes.keysAdded.forEach(key => console.log(`   + ${key}`))
    } else {
      this.changes.keysAdded.slice(0, 10).forEach(key => console.log(`   + ${key}`))
      console.log(`   ... —Ç–∞ —â–µ ${this.changes.keysAdded.length - 10} –∫–ª—é—á—ñ–≤`)
    }
    
    if (this.changes.keysRemoved.length > 0) {
      console.log(`\nüóëÔ∏è  –ö–ª—é—á—ñ–≤ –≤–∏–¥–∞–ª–µ–Ω–æ: ${this.changes.keysRemoved.length}`)
      this.changes.keysRemoved.forEach(key => console.log(`   - ${key}`))
    }
    
    console.log(`\n‚úÖ –°–∏–Ω—Ö—Ä–æ–Ω—ñ–∑–∞—Ü—ñ—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞!`)
    
    if (CONFIG.options.createBackup) {
      console.log(`üíæ Backup –∑–±–µ—Ä–µ–∂–µ–Ω–æ –≤: ${CONFIG.backupDir}/`)
    }
  }
}

// –§—É–Ω–∫—Ü—ñ—è –¥–ª—è –≤–∞–ª—ñ–¥–∞—Ü—ñ—ó —Å—Ç—Ä—É–∫—Ç—É—Ä–∏
function validateStructure() {
  console.log('üîç –í–∞–ª—ñ–¥–∞—Ü—ñ—è —Å—Ç—Ä—É–∫—Ç—É—Ä–∏ –ø–µ—Ä–µ–∫–ª–∞–¥—ñ–≤...\n')
  
  const issues = []
  const locales = fs.readdirSync(CONFIG.localesDir)
  
  // –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ –Ω–∞—è–≤–Ω—ñ—Å—Ç—å –±–∞–∑–æ–≤–æ—ó –º–æ–≤–∏
  if (!locales.includes(CONFIG.baseLocale)) {
    issues.push(`‚ùå –ë–∞–∑–æ–≤–∞ –º–æ–≤–∞ ${CONFIG.baseLocale} –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–∞`)
  }
  
  // –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —Å—Ç—Ä—É–∫—Ç—É—Ä—É –∫–æ–∂–Ω–æ—ó –º–æ–≤–∏
  const namespaces = new Set()
  
  locales.forEach(locale => {
    const localeDir = path.join(CONFIG.localesDir, locale)
    if (fs.statSync(localeDir).isDirectory()) {
      const files = fs.readdirSync(localeDir).filter(f => f.endsWith('.json'))
      files.forEach(file => namespaces.add(file.replace('.json', '')))
    }
  })
  
  // –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —á–∏ –≤—Å—ñ –º–æ–≤–∏ –º–∞—é—Ç—å –≤—Å—ñ namespaces
  locales.forEach(locale => {
    const localeDir = path.join(CONFIG.localesDir, locale)
    if (fs.statSync(localeDir).isDirectory()) {
      const files = fs.readdirSync(localeDir).filter(f => f.endsWith('.json'))
      const localeNamespaces = files.map(f => f.replace('.json', ''))
      
      namespaces.forEach(namespace => {
        if (!localeNamespaces.includes(namespace)) {
          issues.push(`‚ö†Ô∏è  ${locale} –≤—ñ–¥—Å—É—Ç–Ω—ñ–π namespace: ${namespace}`)
        }
      })
    }
  })
  
  // –í–∏–≤–æ–¥–∏–º–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∏
  if (issues.length === 0) {
    console.log('‚úÖ –°—Ç—Ä—É–∫—Ç—É—Ä–∞ –∫–æ—Ä–µ–∫—Ç–Ω–∞!')
  } else {
    console.log('‚ùå –ó–Ω–∞–π–¥–µ–Ω–æ –ø—Ä–æ–±–ª–µ–º–∏:')
    issues.forEach(issue => console.log(`   ${issue}`))
  }
  
  console.log(`\nüìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:`)
  console.log(`   –ú–æ–≤–∏: ${locales.length} (${locales.join(', ')})`)
  console.log(`   Namespaces: ${namespaces.size} (${Array.from(namespaces).join(', ')})`)
}

// –§—É–Ω–∫—Ü—ñ—è –¥–ª—è –æ—á–∏—â–µ–Ω–Ω—è –¥—É–±–ª—ñ–∫–∞—Ç—ñ–≤
function removeDuplicates() {
  console.log('üßπ –í–∏–¥–∞–ª–µ–Ω–Ω—è –¥—É–±–ª—ñ–∫–∞—Ç—ñ–≤...\n')
  
  const duplicates = []
  const locales = fs.readdirSync(CONFIG.localesDir)
  
  locales.forEach(locale => {
    const localeDir = path.join(CONFIG.localesDir, locale)
    if (!fs.statSync(localeDir).isDirectory()) return
    
    const files = fs.readdirSync(localeDir).filter(f => f.endsWith('.json'))
    
    files.forEach(file => {
      const filePath = path.join(localeDir, file)
      
      try {
        const data = JSON.parse(fs.readFileSync(filePath, 'utf8'))
        const keys = TranslationUtils.getAllKeys(data)
        const uniqueKeys = [...new Set(keys)]
        
        if (keys.length !== uniqueKeys.length) {
          duplicates.push(`${locale}/${file}: ${keys.length - uniqueKeys.length} –¥—É–±–ª—ñ–∫–∞—Ç—ñ–≤`)
        }
      } catch (error) {
        console.log(`‚ùå –ü–æ–º–∏–ª–∫–∞ —á–∏—Ç–∞–Ω–Ω—è ${locale}/${file}: ${error.message}`)
      }
    })
  })
  
  if (duplicates.length === 0) {
    console.log('‚úÖ –î—É–±–ª—ñ–∫–∞—Ç—ñ–≤ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ!')
  } else {
    console.log('‚ùå –ó–Ω–∞–π–¥–µ–Ω–æ –¥—É–±–ª—ñ–∫–∞—Ç–∏:')
    duplicates.forEach(dup => console.log(`   ${dup}`))
  }
}

// CLI —ñ–Ω—Ç–µ—Ä—Ñ–µ–π—Å
async function main() {
  const args = process.argv.slice(2)
  const command = args[0] || 'sync'
  
  try {
    switch (command) {
      case 'sync':
        const synchronizer = new TranslationSynchronizer()
        await synchronizer.synchronize()
        break
        
      case 'validate':
        validateStructure()
        break
        
      case 'clean':
        removeDuplicates()
        break
        
      case 'config':
        console.log('‚öôÔ∏è  –ü–æ—Ç–æ—á–Ω–∞ –∫–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—è:')
        console.log(JSON.stringify(CONFIG, null, 2))
        break
        
      case 'help':
      default:
        console.log('üîÑ –°–∏–Ω—Ö—Ä–æ–Ω—ñ–∑–∞—Ç–æ—Ä –ø–µ—Ä–µ–∫–ª–∞–¥—ñ–≤')
        console.log('')
        console.log('üìã –î–æ—Å—Ç—É–ø–Ω—ñ –∫–æ–º–∞–Ω–¥–∏:')
        console.log('   sync      - –°–∏–Ω—Ö—Ä–æ–Ω—ñ–∑—É–≤–∞—Ç–∏ –ø–µ—Ä–µ–∫–ª–∞–¥–∏ (–∑–∞ –∑–∞–º–æ–≤—á—É–≤–∞–Ω–Ω—è–º)')
        console.log('   validate  - –ü–µ—Ä–µ–≤—ñ—Ä–∏—Ç–∏ —Å—Ç—Ä—É–∫—Ç—É—Ä—É –ø–µ—Ä–µ–∫–ª–∞–¥—ñ–≤')
        console.log('   clean     - –í–∏–¥–∞–ª–∏—Ç–∏ –¥—É–±–ª—ñ–∫–∞—Ç–∏')
        console.log('   config    - –ü–æ–∫–∞–∑–∞—Ç–∏ –ø–æ—Ç–æ—á–Ω—É –∫–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—é')
        console.log('   help      - –ü–æ–∫–∞–∑–∞—Ç–∏ —Ü—é –¥–æ–≤—ñ–¥–∫—É')
        console.log('')
        console.log('üìñ –ü—Ä–∏–∫–ª–∞–¥–∏:')
        console.log('   node sync-translations.js sync')
        console.log('   node sync-translations.js validate')
        console.log('   node sync-translations.js clean')
        break
    }
  } catch (error) {
    console.error(`‚ùå –ü–æ–º–∏–ª–∫–∞: ${error.message}`)
    process.exit(1)
  }
}

// –ï–∫—Å–ø–æ—Ä—Ç –¥–ª—è –≤–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è —è–∫ –º–æ–¥—É–ª—å
module.exports = {
  TranslationSynchronizer,
  TranslationUtils,
  CONFIG,
  validateStructure,
  removeDuplicates
}

// –ó–∞–ø—É—Å–∫ —è–∫—â–æ –≤–∏–∫–ª–∏–∫–∞–Ω–æ –Ω–∞–ø—Ä—è–º—É
if (require.main === module) {
  main()
}
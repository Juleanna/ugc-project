#!/usr/bin/env node
/**
 * –°–∫—Ä–∏–ø—Ç –¥–ª—è —Å–∏–Ω—Ö—Ä–æ–Ω—ñ–∑–∞—Ü—ñ—ó –ø–µ—Ä–µ–∫–ª–∞–¥—ñ–≤ –º—ñ–∂ frontend —ñ backend
 * –í–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è:
 * node sync-translations.js --direction=fe-to-be  # Frontend -> Backend
 * node sync-translations.js --direction=be-to-fe  # Backend -> Frontend
 * node sync-translations.js --merge               # –û–±'—î–¥–Ω–∞—Ç–∏ –ø–µ—Ä–µ–∫–ª–∞–¥–∏
 */

const fs = require('fs-extra');
const path = require('path');
const { execSync } = require('child_process');

// –®–ª—è—Ö–∏ –¥–æ —Ñ–∞–π–ª—ñ–≤
const paths = {
  frontend: {
    uk: './public/locales/uk/common.json',
    en: './public/locales/en/common.json'
  },
  backend: {
    uk: '../backend/translations/uk.json',
    en: '../backend/translations/en.json'
  }
};

// –ö–æ–ª—å–æ—Ä–∏ –¥–ª—è –∫–æ–Ω—Å–æ–ª—å–Ω–æ–≥–æ –≤–∏–≤–æ–¥—É
const colors = {
  reset: '\x1b[0m',
  bright: '\x1b[1m',
  green: '\x1b[32m',
  yellow: '\x1b[33m',
  blue: '\x1b[34m',
  red: '\x1b[31m'
};

function log(message, color = colors.reset) {
  console.log(`${color}${message}${colors.reset}`);
}

// –§—É–Ω–∫—Ü—ñ—è –¥–ª—è —á–∏—Ç–∞–Ω–Ω—è JSON —Ñ–∞–π–ª—É
async function readJsonFile(filePath) {
  try {
    const content = await fs.readJson(filePath);
    return content || {};
  } catch (error) {
    log(`‚ö†Ô∏è  –§–∞–π–ª –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ: ${filePath}`, colors.yellow);
    return {};
  }
}

// –§—É–Ω–∫—Ü—ñ—è –¥–ª—è –∑–∞–ø–∏—Å—É JSON —Ñ–∞–π–ª—É
async function writeJsonFile(filePath, data) {
  await fs.ensureFile(filePath);
  await fs.writeJson(filePath, data, { spaces: 2 });
}

// –§—É–Ω–∫—Ü—ñ—è –¥–ª—è –≤–∏—Ä—ñ–≤–Ω—é–≤–∞–Ω–Ω—è –≤–∫–ª–∞–¥–µ–Ω–∏—Ö –æ–±'—î–∫—Ç—ñ–≤
function flattenObject(obj, prefix = '') {
  const flattened = {};

  for (const [key, value] of Object.entries(obj)) {
    const fullKey = prefix ? `${prefix}.${key}` : key;

    if (typeof value === 'object' && value !== null && !Array.isArray(value)) {
      Object.assign(flattened, flattenObject(value, fullKey));
    } else {
      flattened[fullKey] = value;
    }
  }

  return flattened;
}

// –§—É–Ω–∫—Ü—ñ—è –¥–ª—è –≤—ñ–¥–Ω–æ–≤–ª–µ–Ω–Ω—è –≤–∫–ª–∞–¥–µ–Ω–æ—ó —Å—Ç—Ä—É–∫—Ç—É—Ä–∏
function unflattenObject(obj) {
  const result = {};

  for (const [key, value] of Object.entries(obj)) {
    const parts = key.split('.');
    let current = result;

    for (let i = 0; i < parts.length - 1; i++) {
      if (!current[parts[i]]) {
        current[parts[i]] = {};
      }
      current = current[parts[i]];
    }

    current[parts[parts.length - 1]] = value;
  }

  return result;
}

// –°–∏–Ω—Ö—Ä–æ–Ω—ñ–∑–∞—Ü—ñ—è Frontend -> Backend
async function syncFrontendToBackend() {
  log('\nüì• –°–∏–Ω—Ö—Ä–æ–Ω—ñ–∑–∞—Ü—ñ—è Frontend -> Backend', colors.blue);

  for (const locale of ['uk', 'en']) {
    log(`\nüåç –û–±—Ä–æ–±–∫–∞ –ª–æ–∫–∞–ª—ñ: ${locale}`, colors.bright);

    // –ß–∏—Ç–∞—î–º–æ —Ñ–∞–π–ª–∏
    const frontendData = await readJsonFile(paths.frontend[locale]);
    const backendData = await readJsonFile(paths.backend[locale]);

    // –í–∏—Ä—ñ–≤–Ω—é—î–º–æ frontend –¥–∞–Ω—ñ
    const flattenedFrontend = flattenObject(frontendData);

    // –û–±'—î–¥–Ω—É—î–º–æ –∑ –ø—Ä—ñ–æ—Ä–∏—Ç–µ—Ç–æ–º frontend
    const merged = { ...backendData, ...flattenedFrontend };

    // –ü—ñ–¥—Ä–∞—Ö–æ–≤—É—î–º–æ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
    const newKeys = Object.keys(flattenedFrontend).filter(
      key => !backendData[key]
    );

    // –ó–±–µ—Ä—ñ–≥–∞—î–º–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç
    await writeJsonFile(paths.backend[locale], merged);

    log(`‚úÖ –û–Ω–æ–≤–ª–µ–Ω–æ ${paths.backend[locale]}`, colors.green);
    log(`   –í—Å—å–æ–≥–æ –∫–ª—é—á—ñ–≤: ${Object.keys(merged).length}`);
    log(`   –ù–æ–≤–∏—Ö –∫–ª—é—á—ñ–≤: ${newKeys.length}`);

    if (newKeys.length > 0 && newKeys.length <= 10) {
      log(`   –ù–æ–≤—ñ –∫–ª—é—á—ñ: ${newKeys.join(', ')}`, colors.yellow);
    }
  }
}

// –°–∏–Ω—Ö—Ä–æ–Ω—ñ–∑–∞—Ü—ñ—è Backend -> Frontend
async function syncBackendToFrontend() {
  log('\nüì§ –°–∏–Ω—Ö—Ä–æ–Ω—ñ–∑–∞—Ü—ñ—è Backend -> Frontend', colors.blue);

  for (const locale of ['uk', 'en']) {
    log(`\nüåç –û–±—Ä–æ–±–∫–∞ –ª–æ–∫–∞–ª—ñ: ${locale}`, colors.bright);

    // –ß–∏—Ç–∞—î–º–æ —Ñ–∞–π–ª–∏
    const frontendData = await readJsonFile(paths.frontend[locale]);
    const backendData = await readJsonFile(paths.backend[locale]);

    // –ì—Ä—É–ø—É—î–º–æ backend –ø–µ—Ä–µ–∫–ª–∞–¥–∏ –∑–∞ –∫–∞—Ç–µ–≥–æ—Ä—ñ—è–º–∏
    const flattenedBackend = flattenObject(backendData);
    const merged = { ...flattenObject(frontendData), ...flattenedBackend };

    const unflattenedMerged = unflattenObject(merged);

    // –ó–±–µ—Ä—ñ–≥–∞—î–º–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç
    await writeJsonFile(paths.frontend[locale], unflattenedMerged);

    log(`‚úÖ –û–Ω–æ–≤–ª–µ–Ω–æ ${paths.frontend[locale]}`, colors.green);
    log(`   –í—Å—å–æ–≥–æ –∫–ª—é—á—ñ–≤: ${Object.keys(merged).length}`);
  }
}

// –û–±'—î–¥–Ω–∞–Ω–Ω—è –ø–µ—Ä–µ–∫–ª–∞–¥—ñ–≤
async function mergeTranslations() {
  log('\nüîó –û–±\'—î–¥–Ω–∞–Ω–Ω—è –ø–µ—Ä–µ–∫–ª–∞–¥—ñ–≤', colors.blue);

  for (const locale of ['uk', 'en']) {
    log(`\nüåç –û–±—Ä–æ–±–∫–∞ –ª–æ–∫–∞–ª—ñ: ${locale}`, colors.bright);

    // –ß–∏—Ç–∞—î–º–æ —Ñ–∞–π–ª–∏
    const frontendData = await readJsonFile(paths.frontend[locale]);
    const backendData = await readJsonFile(paths.backend[locale]);

    // –í–∏—Ä—ñ–≤–Ω—é—î–º–æ —Å—Ç—Ä—É–∫—Ç—É—Ä—É
    const flattenedFrontend = flattenObject(frontendData);
    const flattenedBackend = flattenObject(backendData);

    // –û–±\'—î–¥–Ω—É—î–º–æ –¥–∞–Ω—ñ
    const merged = { ...flattenedFrontend, ...flattenedBackend };

    // –í—ñ–¥–Ω–æ–≤–ª—é—î–º–æ —Å—Ç—Ä—É–∫—Ç—É—Ä—É
    const unflattenedMerged = unflattenObject(merged);

    // –ó–±–µ—Ä—ñ–≥–∞—î–º–æ —É frontend —ñ backend
    await writeJsonFile(paths.frontend[locale], unflattenedMerged);
    await writeJsonFile(paths.backend[locale], unflattenedMerged);

    log(`‚úÖ –û–±\'—î–¥–Ω–∞–Ω–æ –¥–ª—è –ª–æ–∫–∞–ª—ñ: ${locale}`, colors.green);
    log(`   –í—Å—å–æ–≥–æ –∫–ª—é—á—ñ–≤: ${Object.keys(merged).length}`);
  }
}

// –ì–æ–ª–æ–≤–Ω–∞ —Ñ—É–Ω–∫—Ü—ñ—è
async function main() {
  const args = process.argv.slice(2);
  const direction = args.find(arg => arg.startsWith('--direction='));
  const merge = args.includes('--merge');

  if (direction) {
    const dirValue = direction.split('=')[1];

    if (dirValue === 'fe-to-be') {
      await syncFrontendToBackend();
    } else if (dirValue === 'be-to-fe') {
      await syncBackendToFrontend();
    } else {
      log('‚ùå –ù–µ–≤—ñ–¥–æ–º–∏–π –Ω–∞–ø—Ä—è–º–æ–∫. –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–π—Ç–µ fe-to-be –∞–±–æ be-to-fe.', colors.red);
    }
  } else if (merge) {
    await mergeTranslations();
  } else {
    log('‚ùå –ë—É–¥—å –ª–∞—Å–∫–∞, –≤–∫–∞–∂—ñ—Ç—å –∞—Ä–≥—É–º–µ–Ω—Ç --direction –∞–±–æ --merge.', colors.red);
  }
}

main().catch(error => {
  log(`‚ùå –ü–æ–º–∏–ª–∫–∞: ${error.message}`, colors.red);
});

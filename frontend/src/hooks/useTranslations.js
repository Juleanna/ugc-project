// frontend/src/hooks/useTranslations.js
'use client'

import { useEffect, useState, useCallback, useRef } from 'react'
import { usePathname } from 'next/navigation'
import apiService from '@/lib/api'

// –ì–ª–æ–±–∞–ª—å–Ω–∏–π –∫–µ—à —Ç–∞ —Å—Ç–∞–Ω –¥–ª—è –∑–∞–ø–æ–±—ñ–≥–∞–Ω–Ω—è –¥—É–±–ª—é–≤–∞–Ω–Ω—é –∑–∞–ø–∏—Ç—ñ–≤
const globalCache = new Map()
const activeRequests = new Map()
const requestQueue = new Map()

// Debounce —Ñ—É–Ω–∫—Ü—ñ—è
function debounce(func, wait) {
  let timeout
  return function executedFunction(...args) {
    const later = () => {
      clearTimeout(timeout)
      func(...args)
    }
    clearTimeout(timeout)
    timeout = setTimeout(later, wait)
  }
}

export function useTranslations(options = {}) {
  const {
    fallbackToStatic = true,
    useBackend = true,
    cacheTime = 1000 * 60 * 15, // 15 —Ö–≤–∏–ª–∏–Ω
    debounceTime = 300, // 300ms debounce
  } = options

  const pathname = usePathname()
  const [translations, setTranslations] = useState({})
  const [currentLocale, setCurrentLocale] = useState('uk')
  const [loading, setLoading] = useState(true)
  const [error, setError] = useState(null)
  const mountedRef = useRef(true)
  const loadingRef = useRef(false)

  // Cleanup –ø—Ä–∏ unmount
  useEffect(() => {
    return () => {
      mountedRef.current = false
    }
  }, [])

  // –í–∏—Ç—è–≥—É—î–º–æ –ª–æ–∫–∞–ª—å –∑ pathname
  useEffect(() => {
    const localeMatch = pathname.match(/^\/([a-z]{2})(\/|$)/)
    const locale = localeMatch ? localeMatch[1] : 'uk'
    
    if (locale !== currentLocale) {
      setCurrentLocale(locale)
    }
  }, [pathname, currentLocale])

  // Debounced function –¥–ª—è –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –ø–µ—Ä–µ–∫–ª–∞–¥—ñ–≤
  const debouncedLoadTranslations = useCallback(
    debounce((locale) => {
      if (!mountedRef.current || loadingRef.current) return
      loadTranslationsWithDeduplication(locale)
    }, debounceTime),
    [useBackend, fallbackToStatic, cacheTime]
  )

  // –ó–∞–≤–∞–Ω—Ç–∞–∂—É—î–º–æ –ø–µ—Ä–µ–∫–ª–∞–¥–∏ –ø—Ä–∏ –∑–º—ñ–Ω—ñ –ª–æ–∫–∞–ª—ñ
  useEffect(() => {
    debouncedLoadTranslations(currentLocale)
  }, [currentLocale, debouncedLoadTranslations])

  const loadTranslationsWithDeduplication = async (locale) => {
    if (!mountedRef.current) return
    
    const cacheKey = `${locale}_${useBackend ? 'backend' : 'static'}`
    
    // –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ –≥–ª–æ–±–∞–ª—å–Ω–∏–π –∫–µ—à
    const cached = globalCache.get(cacheKey)
    if (cached && Date.now() - cached.timestamp < cacheTime) {
      if (mountedRef.current) {
        setTranslations(cached.data)
        setLoading(false)
        setError(null)
      }
      return
    }

    // –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —á–∏ –≤–∂–µ —î –∞–∫—Ç–∏–≤–Ω–∏–π –∑–∞–ø–∏—Ç
    if (activeRequests.has(cacheKey)) {
      // –î–æ–¥–∞—î–º–æ —Å–µ–±–µ –¥–æ —á–µ—Ä–≥–∏ –æ—á—ñ–∫—É–≤–∞–Ω–Ω—è
      return new Promise((resolve) => {
        if (!requestQueue.has(cacheKey)) {
          requestQueue.set(cacheKey, [])
        }
        requestQueue.get(cacheKey).push({ resolve, component: mountedRef })
      })
    }

    // –ü–æ–∑–Ω–∞—á–∞—î–º–æ —â–æ –∑–∞–ø–∏—Ç –∞–∫—Ç–∏–≤–Ω–∏–π
    activeRequests.set(cacheKey, true)
    loadingRef.current = true
    
    if (mountedRef.current) {
      setLoading(true)
      setError(null)
    }

    try {
      let translationsData = {}

      if (useBackend) {
        try {
          // –î–æ–¥–∞—î–º–æ –∑–∞—Ç—Ä–∏–º–∫—É –º—ñ–∂ –∑–∞–ø–∏—Ç–∞–º–∏
          await new Promise(resolve => setTimeout(resolve, Math.random() * 200))
          
          const backendResponse = await apiService.getAllTranslations(locale)
          translationsData = backendResponse.translations || {}
          
          console.log(`‚úÖ –ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–æ ${Object.keys(translationsData).length} –ø–µ—Ä–µ–∫–ª–∞–¥—ñ–≤ –∑ –±–µ–∫–µ–Ω–¥—É –¥–ª—è ${locale}`)
          
        } catch (backendError) {
          console.warn('‚ö†Ô∏è –ü–æ–º–∏–ª–∫–∞ –ø—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è –¥–æ –±–µ–∫–µ–Ω–¥—É:', backendError.message)
          
          if (fallbackToStatic) {
            translationsData = await loadStaticTranslations(locale)
          } else {
            throw backendError
          }
        }
      } else {
        translationsData = await loadStaticTranslations(locale)
      }

      // –ó–±–µ—Ä—ñ–≥–∞—î–º–æ –≤ –≥–ª–æ–±–∞–ª—å–Ω–∏–π –∫–µ—à
      globalCache.set(cacheKey, {
        data: translationsData,
        timestamp: Date.now()
      })

      // –û–Ω–æ–≤–ª—é—î–º–æ —Å—Ç–∞–Ω —è–∫—â–æ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç —â–µ –∑–º–æ–Ω—Ç–æ–≤–∞–Ω–∏–π
      if (mountedRef.current) {
        setTranslations(translationsData)
        setLoading(false)
        setError(null)
      }

      // –°–ø–æ–≤—ñ—â–∞—î–º–æ –≤—Å—ñ—Ö –≤ —á–µ—Ä–∑—ñ
      const queue = requestQueue.get(cacheKey) || []
      queue.forEach(({ resolve, component }) => {
        if (component.current) {
          resolve(translationsData)
        }
      })
      requestQueue.delete(cacheKey)

    } catch (error) {
      console.error('‚ùå –ö—Ä–∏—Ç–∏—á–Ω–∞ –ø–æ–º–∏–ª–∫–∞ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –ø–µ—Ä–µ–∫–ª–∞–¥—ñ–≤:', error)
      
      if (mountedRef.current) {
        setError(error.message)
        setLoading(false)
        
        // Fallback –¥–æ —Å—Ç–∞—Ç–∏—á–Ω–∏—Ö —Ñ–∞–π–ª—ñ–≤ –ø—Ä–∏ –ø–æ–º–∏–ª—Ü—ñ
        if (useBackend && fallbackToStatic) {
          try {
            const fallbackTranslations = await loadStaticTranslations(locale)
            setTranslations(fallbackTranslations)
          } catch (fallbackError) {
            console.error('–ü–æ–º–∏–ª–∫–∞ fallback –ø–µ—Ä–µ–∫–ª–∞–¥—ñ–≤:', fallbackError)
            setTranslations({})
          }
        } else {
          setTranslations({})
        }
      }

      // –°–ø–æ–≤—ñ—â–∞—î–º–æ —á–µ—Ä–≥—É –ø—Ä–æ –ø–æ–º–∏–ª–∫—É
      const queue = requestQueue.get(cacheKey) || []
      queue.forEach(({ resolve, component }) => {
        if (component.current) {
          resolve({})
        }
      })
      requestQueue.delete(cacheKey)
      
    } finally {
      // –í–∏–¥–∞–ª—è—î–º–æ –∞–∫—Ç–∏–≤–Ω–∏–π –∑–∞–ø–∏—Ç
      activeRequests.delete(cacheKey)
      loadingRef.current = false
    }
  }

  const loadStaticTranslations = async (locale) => {
    try {
      const response = await fetch(`/locales/${locale}/common.json`)
      if (response.ok) {
        const data = await response.json()
        console.log(`üìÅ –ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–æ ${Object.keys(data).length} —Å—Ç–∞—Ç–∏—á–Ω–∏—Ö –ø–µ—Ä–µ–∫–ª–∞–¥—ñ–≤ –¥–ª—è ${locale}`)
        return data
      } else if (locale !== 'uk') {
        const fallbackResponse = await fetch(`/locales/uk/common.json`)
        if (fallbackResponse.ok) {
          const fallbackData = await fallbackResponse.json()
          console.log('üîÑ –í–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–æ fallback –¥–æ —É–∫—Ä–∞—ó–Ω—Å—å–∫–æ—ó –º–æ–≤–∏')
          return fallbackData
        }
      }
      return {}
    } catch (error) {
      console.error('–ü–æ–º–∏–ª–∫–∞ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è —Å—Ç–∞—Ç–∏—á–Ω–∏—Ö —Ñ–∞–π–ª—ñ–≤:', error)
      return {}
    }
  }

  const t = useCallback((key, fallback = null, interpolation = {}) => {
    if (!key) return fallback || key

    const keys = key.split('.')
    let value = translations
    
    for (const k of keys) {
      value = value?.[k]
      if (value === undefined) break
    }
    
    if (value === undefined) {
      return fallback || key
    }

    // –ü—ñ–¥—Ç—Ä–∏–º–∫–∞ —ñ–Ω—Ç–µ—Ä–ø–æ–ª—è—Ü—ñ—ó
    if (typeof value === 'string' && Object.keys(interpolation).length > 0) {
      return Object.keys(interpolation).reduce((result, key) => {
        return result.replace(new RegExp(`{{${key}}}`, 'g'), interpolation[key])
      }, value)
    }
    
    return value
  }, [translations])

  // –§—É–Ω–∫—Ü—ñ—è –¥–ª—è –ø—Ä–∏–º—É—Å–æ–≤–æ–≥–æ –ø–µ—Ä–µ–∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è
  const reloadTranslations = useCallback(() => {
    const cacheKey = `${currentLocale}_${useBackend ? 'backend' : 'static'}`
    globalCache.delete(cacheKey)
    activeRequests.delete(cacheKey)
    loadTranslationsWithDeduplication(currentLocale)
  }, [currentLocale, useBackend, loadTranslationsWithDeduplication])

  // –§—É–Ω–∫—Ü—ñ—è –¥–ª—è –æ—á–∏—â–µ–Ω–Ω—è –∫–µ—à—É
  const clearCache = useCallback(() => {
    globalCache.clear()
    activeRequests.clear()
    requestQueue.clear()
  }, [])

  return { 
    t, 
    currentLocale, 
    translations, 
    loading, 
    error,
    reloadTranslations,
    clearCache
  }
}

// –•—É–∫ –¥–ª—è —Ä–æ–±–æ—Ç–∏ —Ç—ñ–ª—å–∫–∏ –∑ –±–µ–∫–µ–Ω–¥ –ø–µ—Ä–µ–∫–ª–∞–¥–∞–º–∏
export function useBackendTranslations() {
  return useTranslations({
    useBackend: true,
    fallbackToStatic: false
  })
}

// –•—É–∫ –¥–ª—è —Ä–æ–±–æ—Ç–∏ —Ç—ñ–ª—å–∫–∏ –∑ —Å—Ç–∞—Ç–∏—á–Ω–∏–º–∏ –ø–µ—Ä–µ–∫–ª–∞–¥–∞–º–∏
export function useStaticTranslations() {
  return useTranslations({
    useBackend: false,
    fallbackToStatic: true
  })
}

// –§—É–Ω–∫—Ü—ñ—è –¥–ª—è –ø–æ–ø–µ—Ä–µ–¥–Ω—å–æ–≥–æ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –ø–µ—Ä–µ–∫–ª–∞–¥—ñ–≤
export async function preloadTranslations(locale, useBackend = true) {
  const cacheKey = `${locale}_${useBackend ? 'backend' : 'static'}`
  
  if (!globalCache.has(cacheKey) && !activeRequests.has(cacheKey)) {
    try {
      let translationsData = {}
      
      if (useBackend) {
        const backendResponse = await apiService.getAllTranslations(locale)
        translationsData = backendResponse.translations || {}
      } else {
        const response = await fetch(`/locales/${locale}/common.json`)
        if (response.ok) {
          translationsData = await response.json()
        }
      }
      
      globalCache.set(cacheKey, {
        data: translationsData,
        timestamp: Date.now()
      })
      
      console.log(`üöÄ –ü–æ–ø–µ—Ä–µ–¥–Ω—å–æ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–æ –ø–µ—Ä–µ–∫–ª–∞–¥–∏ –¥–ª—è ${locale}`)
      
    } catch (error) {
      console.error(`–ü–æ–º–∏–ª–∫–∞ –ø–æ–ø–µ—Ä–µ–¥–Ω—å–æ–≥–æ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –¥–ª—è ${locale}:`, error)
    }
  }
}
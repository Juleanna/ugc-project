// frontend/src/hooks/useTranslations.js - –û–ü–¢–ò–ú–Ü–ó–û–í–ê–ù–ê –í–ï–†–°–Ü–Ø –ë–ï–ó –î–£–ë–õ–Æ–í–ê–ù–ù–Ø
'use client'

import { useState, useEffect, useCallback, useRef, createContext, useContext } from 'react';

// ==================== –ö–û–ù–§–Ü–ì–£–†–ê–¶–Ü–Ø ====================

const CACHE_CONFIG = {
  defaultTTL: 15 * 60 * 1000, // 15 —Ö–≤–∏–ª–∏–Ω
  maxSize: 50,
  storageKey: 'translations_cache_v3'
};

const DEFAULT_LOCALE = 'uk';
const SUPPORTED_LOCALES = ['uk', 'en'];
const API_BASE_URL = process.env.NEXT_PUBLIC_API_URL || 'http://localhost:8000/api';

// ==================== –ö–ï–® –ú–ï–ù–ï–î–ñ–ï–† ====================

class TranslationCacheManager {
  constructor() {
    this.memoryCache = new Map();
    this.activeRequests = new Map(); // –î–ª—è –¥–µ–¥—É–ø–ª—ñ–∫–∞—Ü—ñ—ó –∑–∞–ø–∏—Ç—ñ–≤
  }

  get(key) {
    const cached = this.memoryCache.get(key);
    if (cached && Date.now() - cached.timestamp < cached.ttl) {
      return cached.data;
    }
    this.memoryCache.delete(key);
    return null;
  }

  set(key, data, ttl = CACHE_CONFIG.defaultTTL) {
    // –û–±–º–µ–∂—É—î–º–æ —Ä–æ–∑–º—ñ—Ä –∫–µ—à—É
    if (this.memoryCache.size >= CACHE_CONFIG.maxSize) {
      const firstKey = this.memoryCache.keys().next().value;
      this.memoryCache.delete(firstKey);
    }

    this.memoryCache.set(key, {
      data,
      timestamp: Date.now(),
      ttl
    });
  }

  clear(pattern = null) {
    if (pattern) {
      for (const [key] of this.memoryCache) {
        if (key.includes(pattern)) {
          this.memoryCache.delete(key);
        }
      }
    } else {
      this.memoryCache.clear();
    }
  }

  has(key) {
    return this.memoryCache.has(key) && this.get(key) !== null;
  }

  getStats() {
    return {
      cacheSize: this.memoryCache.size,
      activeRequests: this.activeRequests.size,
      keys: Array.from(this.memoryCache.keys())
    };
  }

  // –î–µ–¥—É–ø–ª—ñ–∫–∞—Ü—ñ—è –∑–∞–ø–∏—Ç—ñ–≤
  async getOrFetch(key, fetchFunction) {
    // –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ –∫–µ—à
    const cached = this.get(key);
    if (cached) return cached;

    // –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ –∞–∫—Ç–∏–≤–Ω—ñ –∑–∞–ø–∏—Ç–∏
    if (this.activeRequests.has(key)) {
      return await this.activeRequests.get(key);
    }

    // –°—Ç–≤–æ—Ä—é—î–º–æ –Ω–æ–≤–∏–π –∑–∞–ø–∏—Ç
    const requestPromise = fetchFunction();
    this.activeRequests.set(key, requestPromise);

    try {
      const result = await requestPromise;
      this.set(key, result);
      return result;
    } finally {
      this.activeRequests.delete(key);
    }
  }
}

// –ì–ª–æ–±–∞–ª—å–Ω–∏–π –µ–∫–∑–µ–º–ø–ª—è—Ä –∫–µ—à –º–µ–Ω–µ–¥–∂–µ—Ä–∞
const cacheManager = new TranslationCacheManager();

// ==================== API –î–õ–Ø –ü–ï–†–ï–ö–õ–ê–î–Ü–í ====================

class TranslationsAPI {
  constructor() {
    this.baseURL = API_BASE_URL;
    this.timeout = 10000;
  }

  /**
   * –ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –ø–µ—Ä–µ–∫–ª–∞–¥—ñ–≤ –∑ —Å–µ—Ä–≤–µ—Ä–∞
   */
  async fetchTranslations(locale, options = {}) {
    const {
      source = 'all',
      namespace = null,
      refresh = false
    } = options;

    const params = new URLSearchParams();
    if (source !== 'all') params.append('source', source);
    if (namespace) params.append('namespace', namespace);
    if (refresh) params.append('refresh', 'true');

    const endpoint = `/translations/${locale}/`;
    const url = params.toString() ? `${endpoint}?${params}` : endpoint;
    const fullURL = `${this.baseURL}${url}`;

    console.log(`üåç –ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –ø–µ—Ä–µ–∫–ª–∞–¥—ñ–≤: ${locale} (${source})`);

    try {
      const controller = new AbortController();
      const timeoutId = setTimeout(() => controller.abort(), this.timeout);

      const response = await fetch(fullURL, {
        method: 'GET',
        headers: {
          'Content-Type': 'application/json',
          'Accept': 'application/json',
        },
        signal: controller.signal,
      });

      clearTimeout(timeoutId);

      if (!response.ok) {
        throw new Error(`HTTP ${response.status}: ${response.statusText}`);
      }

      const data = await response.json();
      console.log(`‚úÖ –ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–æ ${data.count || 0} –ø–µ—Ä–µ–∫–ª–∞–¥—ñ–≤ –¥–ª—è ${locale}`);
      
      return {
        locale,
        translations: data.translations || {},
        count: data.count || 0,
        source: data.source || source,
        cached: data.cached || false,
        timestamp: Date.now()
      };

    } catch (error) {
      console.error(`‚ùå –ü–æ–º–∏–ª–∫–∞ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –ø–µ—Ä–µ–∫–ª–∞–¥—ñ–≤ –¥–ª—è ${locale}:`, error.message);
      
      // Fallback —Å—Ç—Ä–∞—Ç–µ–≥—ñ—è
      return await this.getFallbackTranslations(locale);
    }
  }

  /**
   * Fallback –ø–µ—Ä–µ–∫–ª–∞–¥–∏ –ø—Ä–∏ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—ñ API
   */
  async getFallbackTranslations(locale) {
    console.warn(`üîÑ –í–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è fallback –ø–µ—Ä–µ–∫–ª–∞–¥—ñ–≤ –¥–ª—è ${locale}`);
    
    try {
      // –°–ø—Ä–æ–±—É—î–º–æ –∑–∞–≤–∞–Ω—Ç–∞–∂–∏—Ç–∏ —Å—Ç–∞—Ç–∏—á–Ω—ñ —Ñ–∞–π–ª–∏
      const staticResponse = await fetch(`/locales/${locale}/common.json`);
      if (staticResponse.ok) {
        const staticData = await staticResponse.json();
        return {
          locale,
          translations: this.flattenObject(staticData),
          count: Object.keys(staticData).length,
          source: 'static_fallback',
          cached: false,
          fallback: true,
          timestamp: Date.now()
        };
      }
    } catch (staticError) {
      console.warn('‚ö†Ô∏è –°—Ç–∞—Ç–∏—á–Ω—ñ —Ñ–∞–π–ª–∏ —Ç–∞–∫–æ–∂ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ñ:', staticError.message);
    }
    
    // –û—Å—Ç–∞–Ω–Ω—ñ–π fallback - –±–∞–∑–æ–≤—ñ –ø–µ—Ä–µ–∫–ª–∞–¥–∏
    const basicTranslations = this.getBasicTranslations(locale);
    return {
      locale,
      translations: basicTranslations,
      count: Object.keys(basicTranslations).length,
      source: 'basic_fallback',
      cached: false,
      fallback: true,
      timestamp: Date.now()
    };
  }

  /**
   * –ë–∞–∑–æ–≤—ñ –ø–µ—Ä–µ–∫–ª–∞–¥–∏ –¥–ª—è –∫—Ä–∏—Ç–∏—á–Ω–∏—Ö –≤–∏–ø–∞–¥–∫—ñ–≤
   */
  getBasicTranslations(locale) {
    const translations = {
      'uk': {
        'common.loading': '–ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è...',
        'common.error': '–°—Ç–∞–ª–∞—Å—è –ø–æ–º–∏–ª–∫–∞',
        'common.retry': '–°–ø—Ä–æ–±—É–≤–∞—Ç–∏ –∑–Ω–æ–≤—É',
        'common.success': '–£—Å–ø—ñ—à–Ω–æ',
        'common.cancel': '–°–∫–∞—Å—É–≤–∞—Ç–∏',
        'common.save': '–ó–±–µ—Ä–µ–≥—Ç–∏',
        'common.edit': '–†–µ–¥–∞–≥—É–≤–∞—Ç–∏',
        'common.delete': '–í–∏–¥–∞–ª–∏—Ç–∏',
        'common.search': '–ü–æ—à—É–∫',
        'common.back': '–ù–∞–∑–∞–¥',
        'common.next': '–î–∞–ª—ñ',
        'common.close': '–ó–∞–∫—Ä–∏—Ç–∏',
        'header.company': '–ö–æ–º–ø–∞–Ω—ñ—è',
        'header.services': '–ü–æ—Å–ª—É–≥–∏',
        'header.projects': '–ü—Ä–æ–µ–∫—Ç–∏',
        'header.about': '–ü—Ä–æ –Ω–∞—Å',
        'header.contact': '–ö–æ–Ω—Ç–∞–∫—Ç–∏',
        'nav.home': '–ì–æ–ª–æ–≤–Ω–∞',
        'footer.rights': '¬© 2024 –í—Å—ñ –ø—Ä–∞–≤–∞ –∑–∞—Ö–∏—â–µ–Ω—ñ'
      },
      'en': {
        'common.loading': 'Loading...',
        'common.error': 'Error occurred',
        'common.retry': 'Try again',
        'common.success': 'Success',
        'common.cancel': 'Cancel',
        'common.save': 'Save',
        'common.edit': 'Edit',
        'common.delete': 'Delete',
        'common.search': 'Search',
        'common.back': 'Back',
        'common.next': 'Next',
        'common.close': 'Close',
        'header.company': 'Company',
        'header.services': 'Services',
        'header.projects': 'Projects',
        'header.about': 'About',
        'header.contact': 'Contact',
        'nav.home': 'Home',
        'footer.rights': '¬© 2024 All rights reserved'
      }
    };
    
    return translations[locale] || translations['uk'];
  }

  /**
   * –£—Ç–∏–ª—ñ—Ç–∞ –¥–ª—è —Å–ø–ª–æ—â–µ–Ω–Ω—è –æ–±'—î–∫—Ç–∞
   */
  flattenObject(obj, prefix = '') {
    const flattened = {};
    
    for (const [key, value] of Object.entries(obj)) {
      const newKey = prefix ? `${prefix}.${key}` : key;
      
      if (typeof value === 'object' && value !== null && !Array.isArray(value)) {
        Object.assign(flattened, this.flattenObject(value, newKey));
      } else {
        flattened[newKey] = value;
      }
    }
    
    return flattened;
  }

  /**
   * –û—á–∏—â–µ–Ω–Ω—è —Å–µ—Ä–≤–µ—Ä–Ω–æ–≥–æ –∫–µ—à—É
   */
  async clearServerCache() {
    try {
      const response = await fetch(`${this.baseURL}/webhooks/translations/`, {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify({})
      });
      
      if (response.ok) {
        console.log('‚úÖ –°–µ—Ä–≤–µ—Ä–Ω–∏–π –∫–µ—à –ø–µ—Ä–µ–∫–ª–∞–¥—ñ–≤ –æ—á–∏—â–µ–Ω–æ');
        return true;
      }
      return false;
    } catch (error) {
      console.error('‚ùå –ü–æ–º–∏–ª–∫–∞ –æ—á–∏—â–µ–Ω–Ω—è —Å–µ—Ä–≤–µ—Ä–Ω–æ–≥–æ –∫–µ—à—É:', error.message);
      return false;
    }
  }
}

// –ì–ª–æ–±–∞–ª—å–Ω–∏–π –µ–∫–∑–µ–º–ø–ª—è—Ä API
const translationsAPI = new TranslationsAPI();

// ==================== –ì–û–õ–û–í–ù–ò–ô –•–£–ö ====================

/**
 * –û—Å–Ω–æ–≤–Ω–∏–π —Ö—É–∫ –¥–ª—è —Ä–æ–±–æ—Ç–∏ –∑ –ø–µ—Ä–µ–∫–ª–∞–¥–∞–º–∏
 */
export function useTranslations(options = {}) {
  const {
    locale = DEFAULT_LOCALE,
    namespace = null,
    useBackend = true,
    fallbackToStatic = true,
    cacheTime = CACHE_CONFIG.defaultTTL
  } = options;

  // State
  const [state, setState] = useState({
    translations: {},
    currentLocale: locale,
    loading: true,
    error: null,
    source: 'none',
    lastUpdated: null
  });

  // Refs
  const mountedRef = useRef(true);

  // –û—á–∏—â–µ–Ω–Ω—è –ø—Ä–∏ unmount
  useEffect(() => {
    return () => {
      mountedRef.current = false;
    };
  }, []);

  // –§—É–Ω–∫—Ü—ñ—è –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –ø–µ—Ä–µ–∫–ª–∞–¥—ñ–≤
  const loadTranslations = useCallback(async (targetLocale = locale, targetNamespace = namespace) => {
    if (!SUPPORTED_LOCALES.includes(targetLocale)) {
      console.error(`‚ùå –ù–µ–ø—ñ–¥—Ç—Ä–∏–º—É–≤–∞–Ω–∞ –ª–æ–∫–∞–ª—å: ${targetLocale}`);
      return {};
    }

    const cacheKey = `translations_${targetLocale}_${targetNamespace || 'all'}_${useBackend ? 'backend' : 'static'}`;

    try {
      const result = await cacheManager.getOrFetch(cacheKey, async () => {
        if (useBackend) {
          return await translationsAPI.fetchTranslations(targetLocale, {
            namespace: targetNamespace,
            source: 'all'
          });
        } else {
          return await translationsAPI.getFallbackTranslations(targetLocale);
        }
      });

      if (mountedRef.current) {
        setState(prev => ({
          ...prev,
          translations: result.translations,
          currentLocale: targetLocale,
          loading: false,
          error: null,
          source: result.source,
          lastUpdated: result.timestamp
        }));
      }

      return result.translations;
    } catch (error) {
      console.error('‚ùå –ü–æ–º–∏–ª–∫–∞ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –ø–µ—Ä–µ–∫–ª–∞–¥—ñ–≤:', error.message);
      
      if (mountedRef.current) {
        setState(prev => ({
          ...prev,
          loading: false,
          error: error.message
        }));
      }
      
      return {};
    }
  }, [locale, namespace, useBackend]);

  // –§—É–Ω–∫—Ü—ñ—è –ø–µ—Ä–µ–∫–ª–∞–¥—É
  const t = useCallback((key, defaultValue = key, interpolations = {}) => {
    if (!key) return defaultValue;

    // –î–æ–¥–∞—î–º–æ namespace —è–∫—â–æ –ø–æ—Ç—Ä—ñ–±–Ω–æ
    let fullKey = key;
    if (namespace && !key.includes('.') && !key.startsWith(namespace)) {
      fullKey = `${namespace}.${key}`;
    }

    let translation = state.translations[fullKey] || defaultValue;

    // –Ü–Ω—Ç–µ—Ä–ø–æ–ª—è—Ü—ñ—è –∑–º—ñ–Ω–Ω–∏—Ö
    if (typeof translation === 'string' && Object.keys(interpolations).length > 0) {
      translation = translation.replace(/\{\{(\w+)\}\}/g, (match, varName) => {
        return interpolations[varName] !== undefined ? interpolations[varName] : match;
      });
    }

    return translation;
  }, [state.translations, namespace]);

  // –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –Ω–∞—è–≤–Ω–æ—Å—Ç—ñ –ø–µ—Ä–µ–∫–ª–∞–¥—É
  const hasTranslation = useCallback((key) => {
    if (!key) return false;
    
    let fullKey = key;
    if (namespace && !key.includes('.') && !key.startsWith(namespace)) {
      fullKey = `${namespace}.${key}`;
    }
    
    return state.translations.hasOwnProperty(fullKey);
  }, [state.translations, namespace]);

  // –§—É–Ω–∫—Ü—ñ—è –∑–º—ñ–Ω–∏ –ª–æ–∫–∞–ª—ñ
  const changeLocale = useCallback(async (newLocale) => {
    if (newLocale === state.currentLocale) return;
    
    if (!SUPPORTED_LOCALES.includes(newLocale)) {
      console.error(`‚ùå –ù–µ–ø—ñ–¥—Ç—Ä–∏–º—É–≤–∞–Ω–∞ –ª–æ–∫–∞–ª—å: ${newLocale}`);
      return;
    }
    
    console.log(`üåç –ó–º—ñ–Ω–∞ –ª–æ–∫–∞–ª—ñ –∑ ${state.currentLocale} –Ω–∞ ${newLocale}`);
    await loadTranslations(newLocale, namespace);
  }, [state.currentLocale, namespace, loadTranslations]);

  // –§—É–Ω–∫—Ü—ñ—è –æ–Ω–æ–≤–ª–µ–Ω–Ω—è –ø–µ—Ä–µ–∫–ª–∞–¥—ñ–≤
  const refresh = useCallback(async () => {
    console.log('üîÑ –ü—Ä–∏–º—É—Å–æ–≤–µ –æ–Ω–æ–≤–ª–µ–Ω–Ω—è –ø–µ—Ä–µ–∫–ª–∞–¥—ñ–≤...');
    cacheManager.clear();
    await loadTranslations(state.currentLocale, namespace);
  }, [state.currentLocale, namespace, loadTranslations]);

  // –ê–≤—Ç–æ–º–∞—Ç–∏—á–Ω–µ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –ø—Ä–∏ –º–æ–Ω—Ç—É–≤–∞–Ω–Ω—ñ
  useEffect(() => {
    loadTranslations(locale, namespace);
  }, [locale, namespace, loadTranslations]);

  // –ü–æ–≤–µ—Ä—Ç–∞—î–º–æ API —Ö—É–∫–∞
  return {
    // –î–∞–Ω—ñ
    translations: state.translations,
    locale: state.currentLocale,
    loading: state.loading,
    error: state.error,
    source: state.source,
    lastUpdated: state.lastUpdated,
    
    // –§—É–Ω–∫—Ü—ñ—ó
    t,
    hasTranslation,
    changeLocale,
    refresh,
    
    // –£—Ç–∏–ª—ñ—Ç–∏
    isLoading: state.loading,
    hasError: !!state.error,
    isReady: !state.loading && !state.error && Object.keys(state.translations).length > 0,
    translationsCount: Object.keys(state.translations).length,
    supportedLocales: SUPPORTED_LOCALES
  };
}

// ==================== –•–£–ö –î–õ–Ø NAMESPACE ====================

/**
 * –•—É–∫ –¥–ª—è —Ä–æ–±–æ—Ç–∏ –∑ –ø–µ—Ä–µ–∫–ª–∞–¥–∞–º–∏ –∑ namespace
 */
export function usePageTranslations(namespace, options = {}) {
  const translationsApi = useTranslations({
    namespace,
    ...options
  });

  // –§—É–Ω–∫—Ü—ñ—è –ø–µ—Ä–µ–∫–ª–∞–¥—É –∑ –∞–≤—Ç–æ–º–∞—Ç–∏—á–Ω–∏–º namespace
  const t = useCallback((key, defaultValue = key, interpolations = {}) => {
    let fullKey = key;
    if (namespace && !key.includes('.') && !key.startsWith(namespace)) {
      fullKey = `${namespace}.${key}`;
    }
    
    return translationsApi.t(fullKey, defaultValue, interpolations);
  }, [translationsApi.t, namespace]);

  return {
    ...translationsApi,
    t,
    namespace
  };
}

// ==================== –ö–û–ù–¢–ï–ö–°–¢ ====================

const TranslationsContext = createContext(null);

/**
 * –ü—Ä–æ–≤–∞–π–¥–µ—Ä –∫–æ–Ω—Ç–µ–∫—Å—Ç—É –ø–µ—Ä–µ–∫–ª–∞–¥—ñ–≤
 */
export function TranslationsProvider({ children, locale = DEFAULT_LOCALE, ...options }) {
  const translationsApi = useTranslations({ locale, ...options });
  
  return (
    <TranslationsContext.Provider value={translationsApi}>
      {children}
    </TranslationsContext.Provider>
  );
}

/**
 * –•—É–∫ –¥–ª—è –≤–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è –∫–æ–Ω—Ç–µ–∫—Å—Ç—É –ø–µ—Ä–µ–∫–ª–∞–¥—ñ–≤
 */
export function useTranslationsContext() {
  const context = useContext(TranslationsContext);
  if (!context) {
    throw new Error('useTranslationsContext must be used within TranslationsProvider');
  }
  return context;
}

// ==================== HOC –î–õ–Ø –ü–ï–†–ï–ö–õ–ê–î–Ü–í ====================

/**
 * HOC –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–Ω–æ–≥–æ –¥–æ–¥–∞–≤–∞–Ω–Ω—è –ø–µ—Ä–µ–∫–ª–∞–¥—ñ–≤ –¥–æ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞
 */
export function withTranslations(WrappedComponent, options = {}) {
  const TranslatedComponent = function(props) {
    const translationsApi = useTranslations(options);
    
    return (
      <WrappedComponent 
        {...props} 
        translations={translationsApi}
        t={translationsApi.t}
        locale={translationsApi.locale}
        changeLocale={translationsApi.changeLocale}
      />
    );
  };
  
  TranslatedComponent.displayName = `withTranslations(${WrappedComponent.displayName || WrappedComponent.name})`;
  
  return TranslatedComponent;
}

/**
 * HOC –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–Ω–æ–≥–æ –∑–∞—Å—Ç–æ—Å—É–≤–∞–Ω–Ω—è namespace
 */
export function withPageTranslations(namespace) {
  return function(WrappedComponent) {
    const TranslatedPageComponent = function(props) {
      const translationsApi = usePageTranslations(namespace);
      
      return (
        <WrappedComponent 
          {...props} 
          translations={translationsApi}
          t={translationsApi.t}
          locale={translationsApi.locale}
        />
      );
    };
    
    TranslatedPageComponent.displayName = `withPageTranslations(${namespace})(${WrappedComponent.displayName || WrappedComponent.name})`;
    
    return TranslatedPageComponent;
  };
}

// ==================== –£–¢–ò–õ–Ü–¢–ê–†–ù–Ü –§–£–ù–ö–¶–Ü–á ====================

/**
 * –§—É–Ω–∫—Ü—ñ—è –¥–ª—è –ø–æ–ø–µ—Ä–µ–¥–Ω—å–æ–≥–æ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –ø–µ—Ä–µ–∫–ª–∞–¥—ñ–≤
 */
export async function preloadTranslations(locale, options = {}) {
  try {
    console.log(`üöÄ –ü–æ–ø–µ—Ä–µ–¥–Ω—î –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –ø–µ—Ä–µ–∫–ª–∞–¥—ñ–≤ –¥–ª—è ${locale}`);
    
    const cacheKey = `translations_${locale}_all_backend`;
    const result = await cacheManager.getOrFetch(cacheKey, async () => {
      return await translationsAPI.fetchTranslations(locale, {
        source: 'all',
        ...options
      });
    });
    
    console.log(`‚úÖ –ü–æ–ø–µ—Ä–µ–¥–Ω—å–æ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–æ ${result.count || 0} –ø–µ—Ä–µ–∫–ª–∞–¥—ñ–≤`);
    return result;
  } catch (error) {
    console.error(`‚ùå –ü–æ–º–∏–ª–∫–∞ –ø–æ–ø–µ—Ä–µ–¥–Ω—å–æ–≥–æ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –¥–ª—è ${locale}:`, error.message);
    return null;
  }
}

/**
 * –§—É–Ω–∫—Ü—ñ—è –¥–ª—è —Å–∏–Ω—Ö—Ä–æ–Ω—ñ–∑–∞—Ü—ñ—ó –∑ —Å–µ—Ä–≤–µ—Ä–æ–º
 */
export async function syncTranslationsWithServer() {
  try {
    console.log('üîÑ –°–∏–Ω—Ö—Ä–æ–Ω—ñ–∑–∞—Ü—ñ—è –ø–µ—Ä–µ–∫–ª–∞–¥—ñ–≤ –∑ —Å–µ—Ä–≤–µ—Ä–æ–º...');
    
    // –û—á–∏—â–∞—î–º–æ –ª–æ–∫–∞–ª—å–Ω–∏–π –∫–µ—à
    cacheManager.clear();
    
    // –û—á–∏—â–∞—î–º–æ —Å–µ—Ä–≤–µ—Ä–Ω–∏–π –∫–µ—à
    await translationsAPI.clearServerCache();
    
    console.log('‚úÖ –°–∏–Ω—Ö—Ä–æ–Ω—ñ–∑–∞—Ü—ñ—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞');
    return true;
  } catch (error) {
    console.error('‚ùå –ü–æ–º–∏–ª–∫–∞ —Å–∏–Ω—Ö—Ä–æ–Ω—ñ–∑–∞—Ü—ñ—ó:', error.message);
    return false;
  }
}

/**
 * –§—É–Ω–∫—Ü—ñ—è –¥–ª—è –æ—Ç—Ä–∏–º–∞–Ω–Ω—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –∫–µ—à—É
 */
export function getTranslationsStats() {
  return cacheManager.getStats();
}

/**
 * –§—É–Ω–∫—Ü—ñ—è –¥–ª—è –æ—á–∏—â–µ–Ω–Ω—è –∫–µ—à—É –ø–µ—Ä–µ–∫–ª–∞–¥—ñ–≤
 */
export function clearTranslationsCache(pattern = null) {
  cacheManager.clear(pattern);
  console.log(`üßπ –ö–µ—à –ø–µ—Ä–µ–∫–ª–∞–¥—ñ–≤ –æ—á–∏—â–µ–Ω–æ${pattern ? ` (pattern: ${pattern})` : ''}`);
}

// ==================== –†–û–ó–†–û–ë–ù–ò–¶–¨–ö–Ü –£–¢–ò–õ–Ü–¢–ò ====================

// –ì–ª–æ–±–∞–ª—å–Ω–∏–π –¥–æ—Å—Ç—É–ø –¥–ª—è –¥–µ–±–∞–≥—É (—Ç—ñ–ª—å–∫–∏ –≤ development)
if (typeof window !== 'undefined' && process.env.NODE_ENV === 'development') {
  window.translationsAPI = translationsAPI;
  window.translationsCache = cacheManager;
  window.clearTranslationsCache = clearTranslationsCache;
  window.getTranslationsStats = getTranslationsStats;
  window.syncTranslationsWithServer = syncTranslationsWithServer;
}

// –ï–∫—Å–ø–æ—Ä—Ç –∑–∞ –∑–∞–º–æ–≤—á—É–≤–∞–Ω–Ω—è–º
export default useTranslations;
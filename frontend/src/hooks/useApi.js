// frontend/src/lib/api.js
class RateLimitedApiService {
  constructor() {
    this.baseURL = process.env.NEXT_PUBLIC_API_BASE_URL || 'http://localhost:8000/api/v1';
    this.timeout = 10000; // 10 —Å–µ–∫—É–Ω–¥
    
    // Rate limiting
    this.requestQueue = []
    this.activeRequests = 0
    this.maxConcurrentRequests = 3
    this.requestDelay = 200 // –º—ñ–ª—ñ—Å–µ–∫—É–Ω–¥–∏ –º—ñ–∂ –∑–∞–ø–∏—Ç–∞–º–∏
    this.lastRequestTime = 0
    
    // Request deduplication
    this.pendingRequests = new Map()
  }

  // –ú–µ—Ç–æ–¥ –¥–ª—è –∫–æ–Ω—Ç—Ä–æ–ª—é rate limiting
  async throttleRequest() {
    const now = Date.now()
    const timeSinceLastRequest = now - this.lastRequestTime
    
    if (timeSinceLastRequest < this.requestDelay) {
      const delay = this.requestDelay - timeSinceLastRequest
      await new Promise(resolve => setTimeout(resolve, delay))
    }
    
    this.lastRequestTime = Date.now()
  }

  // –ë–∞–∑–æ–≤–∏–π –º–µ—Ç–æ–¥ –¥–ª—è –∑–∞–ø–∏—Ç—ñ–≤ –∑ rate limiting
  async request(endpoint, options = {}) {
    const url = `${this.baseURL}${endpoint}`;
    const requestKey = `${options.method || 'GET'}_${url}`
    
    // –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —á–∏ –≤–∂–µ —î –∞–Ω–∞–ª–æ–≥—ñ—á–Ω–∏–π –∑–∞–ø–∏—Ç
    if (this.pendingRequests.has(requestKey)) {
      console.log(`üîÑ –ü–æ–≤—Ç–æ—Ä–Ω–µ –≤–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è –∑–∞–ø–∏—Ç—É: ${requestKey}`)
      return this.pendingRequests.get(requestKey)
    }
    
    // –°—Ç–≤–æ—Ä—é—î–º–æ promise –¥–ª—è —Ü—å–æ–≥–æ –∑–∞–ø–∏—Ç—É
    const requestPromise = this.executeRequest(url, options)
    this.pendingRequests.set(requestKey, requestPromise)
    
    // –í–∏–¥–∞–ª—è—î–º–æ –∑ pending –ø—ñ—Å–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—è
    requestPromise.finally(() => {
      this.pendingRequests.delete(requestKey)
    })
    
    return requestPromise
  }

  async executeRequest(url, options = {}) {
    // –ß–µ–∫–∞—î–º–æ –Ω–∞ rate limit
    await this.throttleRequest()
    
    const config = {
      headers: {
        'Content-Type': 'application/json',
        'Accept': 'application/json',
        ...options.headers,
      },
      ...options,
    };

    // –í–∏–¥–∞–ª—è—î–º–æ Content-Type –¥–ª—è FormData
    if (options.body instanceof FormData) {
      delete config.headers['Content-Type'];
    }

    try {
      const controller = new AbortController();
      const timeoutId = setTimeout(() => controller.abort(), this.timeout);

      console.log(`üì° API –∑–∞–ø–∏—Ç: ${config.method || 'GET'} ${url}`)
      
      const response = await fetch(url, {
        ...config,
        signal: controller.signal,
      });

      clearTimeout(timeoutId);

      if (!response.ok) {
        if (response.status === 429) {
          console.warn('‚ö†Ô∏è Rate limit exceeded, retrying after delay...')
          await new Promise(resolve => setTimeout(resolve, 2000))
          return this.executeRequest(url, options) // Retry
        }
        
        const errorData = await response.text();
        throw new Error(`HTTP ${response.status}: ${errorData}`);
      }

      const contentType = response.headers.get('content-type');
      if (contentType && contentType.includes('application/json')) {
        const data = await response.json()
        console.log(`‚úÖ API –≤—ñ–¥–ø–æ–≤—ñ–¥—å: ${Object.keys(data).length} –∑–∞–ø–∏—Å—ñ–≤`)
        return data
      } else {
        return await response.text();
      }
    } catch (error) {
      if (error.name === 'AbortError') {
        throw new Error('–ó–∞–ø–∏—Ç –ø–µ—Ä–µ–≤–∏—â–∏–≤ —á–∞—Å –æ—á—ñ–∫—É–≤–∞–Ω–Ω—è');
      }
      console.error(`‚ùå API –ø–æ–º–∏–ª–∫–∞: ${error.message}`)
      throw error;
    }
  }

  // GET –∑–∞–ø–∏—Ç
  async get(endpoint, params = {}) {
    const queryString = new URLSearchParams(params).toString();
    const url = queryString ? `${endpoint}?${queryString}` : endpoint;
    return this.request(url, { method: 'GET' });
  }

  // POST –∑–∞–ø–∏—Ç
  async post(endpoint, data = {}) {
    return this.request(endpoint, {
      method: 'POST',
      body: JSON.stringify(data),
    });
  }

  // PUT –∑–∞–ø–∏—Ç
  async put(endpoint, data = {}) {
    return this.request(endpoint, {
      method: 'PUT',
      body: JSON.stringify(data),
    });
  }

  // DELETE –∑–∞–ø–∏—Ç
  async delete(endpoint) {
    return this.request(endpoint, { method: 'DELETE' });
  }

  // ==================== –ü–ï–†–ï–ö–õ–ê–î–ò ====================
  
  /**
   * –û—Ç—Ä–∏–º–∞–Ω–Ω—è —Å—Ç–∞—Ç–∏—á–Ω–∏—Ö –ø–µ—Ä–µ–∫–ª–∞–¥—ñ–≤ –∑ –±–µ–∫–µ–Ω–¥—É
   */
  async getStaticTranslations(locale = 'uk') {
    return this.get(`/translations/${locale}/`);
  }

  /**
   * –û—Ç—Ä–∏–º–∞–Ω–Ω—è –¥–∏–Ω–∞–º—ñ—á–Ω–∏—Ö –ø–µ—Ä–µ–∫–ª–∞–¥—ñ–≤ –∑ –º–æ–¥–µ–ª–µ–π
   */
  async getDynamicTranslations(locale = 'uk') {
    return this.get(`/dynamic-translations/${locale}/`);
  }

  /**
   * –û—Ç—Ä–∏–º–∞–Ω–Ω—è –≤—Å—ñ—Ö –ø–µ—Ä–µ–∫–ª–∞–¥—ñ–≤ (—Å—Ç–∞—Ç–∏—á–Ω—ñ + –¥–∏–Ω–∞–º—ñ—á–Ω—ñ) –∑ –æ–ø—Ç–∏–º—ñ–∑–∞—Ü—ñ—î—é
   */
  async getAllTranslations(locale = 'uk') {
    try {
      // –°–ø–æ—á–∞—Ç–∫—É –Ω–∞–º–∞–≥–∞—î–º–æ—Å—è –æ—Ç—Ä–∏–º–∞—Ç–∏ —Å—Ç–∞—Ç–∏—á–Ω—ñ –ø–µ—Ä–µ–∫–ª–∞–¥–∏
      const staticTranslations = await this.getStaticTranslations(locale)
        .catch(error => {
          console.warn(`–ü–æ–º–∏–ª–∫–∞ —Å—Ç–∞—Ç–∏—á–Ω–∏—Ö –ø–µ—Ä–µ–∫–ª–∞–¥—ñ–≤ –¥–ª—è ${locale}:`, error.message)
          return { translations: {} }
        })

      // –ü–æ—Ç—ñ–º –¥–∏–Ω–∞–º—ñ—á–Ω—ñ (–∑ –¥–æ–¥–∞—Ç–∫–æ–≤–æ—é –∑–∞—Ç—Ä–∏–º–∫–æ—é)
      await new Promise(resolve => setTimeout(resolve, 100))
      const dynamicTranslations = await this.getDynamicTranslations(locale)
        .catch(error => {
          console.warn(`–ü–æ–º–∏–ª–∫–∞ –¥–∏–Ω–∞–º—ñ—á–Ω–∏—Ö –ø–µ—Ä–µ–∫–ª–∞–¥—ñ–≤ –¥–ª—è ${locale}:`, error.message)
          return { translations: {} }
        })

      return {
        locale,
        translations: {
          ...staticTranslations.translations,
          ...dynamicTranslations.translations
        }
      };
    } catch (error) {
      console.error('–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –æ—Ç—Ä–∏–º–∞–Ω–Ω—ñ –≤—Å—ñ—Ö –ø–µ—Ä–µ–∫–ª–∞–¥—ñ–≤:', error);
      return { locale, translations: {} };
    }
  }

  // ==================== –Ü–°–ù–£–Æ–ß–Ü –ú–ï–¢–û–î–ò ====================

  async getHomePage() {
    return this.get('/homepage/');
  }

  async getAboutPage() {
    return this.get('/about/');
  }

  async getServices(params = {}) {
    return this.get('/services/', params);
  }

  async getServiceById(id) {
    return this.get(`/services/${id}/`);
  }

  async getProjectCategories() {
    return this.get('/project-categories/');
  }

  async getProjects(params = {}) {
    return this.get('/projects/', params);
  }

  async getProjectById(id) {
    return this.get(`/projects/${id}/`);
  }

  async getFeaturedProjects() {
    return this.get('/projects/featured/');
  }

  async getProjectsByCategory(categorySlug) {
    return this.get('/projects/by_category/', { category: categorySlug });
  }

  async getJobs(params = {}) {
    return this.get('/jobs/', params);
  }

  async getJobById(id) {
    return this.get(`/jobs/${id}/`);
  }

  async getActiveJobs() {
    return this.get('/jobs/active/');
  }

  async submitJobApplication(data) {
    const formData = new FormData();
    
    Object.keys(data).forEach(key => {
      if (key === 'resume' && data[key] instanceof File) {
        formData.append(key, data[key]);
      } else {
        formData.append(key, data[key]);
      }
    });

    return this.request('/job-applications/', {
      method: 'POST',
      body: formData,
      headers: {},
    });
  }

  async getOffices() {
    return this.get('/offices/');
  }

  async submitContactInquiry(data) {
    return this.post('/contact-inquiries/', data);
  }

  async getPartnershipInfo() {
    return this.get('/partnership-info/');
  }

  async submitPartnerInquiry(data) {
    return this.post('/partner-inquiries/', data);
  }

  async getWorkplacePhotos() {
    return this.get('/workplace-photos/');
  }

  // –ú–µ—Ç–æ–¥ –¥–ª—è –æ—á–∏—â–µ–Ω–Ω—è pending requests
  clearPendingRequests() {
    this.pendingRequests.clear()
    console.log('üßπ –û—á–∏—â–µ–Ω–æ pending requests')
  }
}

// –°—Ç–≤–æ—Ä—é—î–º–æ singleton instance
const apiService = new RateLimitedApiService();

export default apiService;
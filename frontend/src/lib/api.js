// frontend/src/lib/api.js - –í–ò–ü–†–ê–í–õ–ï–ù–ò–ô
class ApiService {
  constructor() {
    this.baseURL = process.env.NEXT_PUBLIC_API_URL || 'http://localhost:8000/api/v1';
    this.timeout = 30000; // 30 —Å–µ–∫—É–Ω–¥
    
    // –í–Ω—É—Ç—Ä—ñ—à–Ω—ñ–π –∫–µ—à (–±–µ–∑ localStorage)
    this.cache = new Map();
    this.activeRequests = new Map();
  }

  // –ë–∞–∑–æ–≤–∏–π –º–µ—Ç–æ–¥ –¥–ª—è –∑–∞–ø–∏—Ç—ñ–≤
  async request(endpoint, options = {}) {
    const controller = new AbortController();
    const timeoutId = setTimeout(() => controller.abort(), this.timeout);

    try {
      const url = `${this.baseURL}${endpoint}`;
      
      const config = {
        headers: {
          'Content-Type': 'application/json',
          'Accept': 'application/json',
          ...options.headers,
        },
        signal: controller.signal,
        ...options,
      };

      console.log(`üåê API –∑–∞–ø–∏—Ç: ${options.method || 'GET'} ${url}`);

      const response = await fetch(url, config);
      clearTimeout(timeoutId);

      if (!response.ok) {
        if (response.status === 429) {
          console.warn('‚ö†Ô∏è Rate limit –ø–µ—Ä–µ–≤–∏—â–µ–Ω–æ, —á–µ–∫–∞—î–º–æ...');
          await new Promise(resolve => setTimeout(resolve, 2000));
          return this.request(endpoint, options); // Retry
        }
        
        const errorData = await response.text();
        throw new Error(`HTTP ${response.status}: ${errorData}`);
      }

      const contentType = response.headers.get('content-type');
      if (contentType && contentType.includes('application/json')) {
        const data = await response.json();
        console.log(`‚úÖ API –≤—ñ–¥–ø–æ–≤—ñ–¥—å: ${Object.keys(data).length || 'OK'} –∑–∞–ø–∏—Å—ñ–≤`);
        return data;
      } else {
        return await response.text();
      }
    } catch (error) {
      clearTimeout(timeoutId);
      if (error.name === 'AbortError') {
        throw new Error('–ó–∞–ø–∏—Ç –ø–µ—Ä–µ–≤–∏—â–∏–≤ —á–∞—Å –æ—á—ñ–∫—É–≤–∞–Ω–Ω—è');
      }
      console.error(`‚ùå API –ø–æ–º–∏–ª–∫–∞: ${error.message}`);
      throw error;
    }
  }

  // GET –∑–∞–ø–∏—Ç
  async get(endpoint, params = {}) {
    const queryString = new URLSearchParams(params).toString();
    const url = queryString ? `${endpoint}?${queryString}` : endpoint;
    return this.request(url, { method: 'GET' });
  }

  // POST –∑–∞–ø–∏—Ç
  async post(endpoint, data = {}) {
    return this.request(endpoint, {
      method: 'POST',
      body: JSON.stringify(data),
    });
  }

  // ==================== –ü–ï–†–ï–ö–õ–ê–î–ò ====================
  
  /**
   * –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π –º–µ—Ç–æ–¥ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –ø–µ—Ä–µ–≤–æ–¥–æ–≤
   */
  async getTranslations(locale = 'uk', options = {}) {
    const {
      source = 'all',           // all, static, po, dynamic
      namespace = null,         // —Ñ—ñ–ª—å—Ç—Ä –∑–∞ namespace
      useCache = true,         // –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–≤–∞—Ç–∏ –∫–µ—à
      refresh = false          // –ø—Ä–∏–º—É—Å–æ–≤–µ –æ–Ω–æ–≤–ª–µ–Ω–Ω—è
    } = options;
    
    const cacheKey = `translations_${locale}_${source}_${namespace || 'all'}`;
    
    // –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ –∫–µ—à
    if (useCache && !refresh && this.cache.has(cacheKey)) {
      const cached = this.cache.get(cacheKey);
      const cacheAge = Date.now() - cached.timestamp;
      const maxAge = 15 * 60 * 1000; // 15 —Ö–≤–∏–ª–∏–Ω
      
      if (cacheAge < maxAge) {
        console.log(`üì¶ –í–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è –∫–µ—à–æ–≤–∞–Ω–∏—Ö –ø–µ—Ä–µ–∫–ª–∞–¥—ñ–≤ –¥–ª—è ${locale}`);
        return cached.data;
      } else {
        this.cache.delete(cacheKey);
      }
    }
    
    // –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ –∞–∫—Ç–∏–≤–Ω—ñ –∑–∞–ø–∏—Ç–∏ (deduplication)
    if (this.activeRequests.has(cacheKey)) {
      console.log(`‚è≥ –û—á—ñ–∫—É–≤–∞–Ω–Ω—è –∞–∫—Ç–∏–≤–Ω–æ–≥–æ –∑–∞–ø–∏—Ç—É –ø–µ—Ä–µ–∫–ª–∞–¥—ñ–≤ –¥–ª—è ${locale}`);
      return await this.activeRequests.get(cacheKey);
    }
    
    // –°—Ç–≤–æ—Ä—é—î–º–æ –Ω–æ–≤–∏–π –∑–∞–ø–∏—Ç
    const requestPromise = this._fetchTranslations(locale, source, namespace, refresh);
    this.activeRequests.set(cacheKey, requestPromise);
    
    try {
      const result = await requestPromise;
      
      // –ó–±–µ—Ä—ñ–≥–∞—î–º–æ –≤ –∫–µ—à
      if (useCache) {
        this.cache.set(cacheKey, {
          data: result,
          timestamp: Date.now()
        });
        
        // –û–±–º–µ–∂—É—î–º–æ —Ä–æ–∑–º—ñ—Ä –∫–µ—à—É
        if (this.cache.size > 50) {
          const firstKey = this.cache.keys().next().value;
          this.cache.delete(firstKey);
        }
      }
      
      return result;
    } finally {
      this.activeRequests.delete(cacheKey);
    }
  }
  
  /**
   * –í–Ω—É—Ç—Ä—ñ—à–Ω—ñ–π –º–µ—Ç–æ–¥ –¥–ª—è –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –ø–µ—Ä–µ–∫–ª–∞–¥—ñ–≤
   */
  async _fetchTranslations(locale, source, namespace, refresh) {
    try {
      const params = new URLSearchParams();
      if (source !== 'all') params.append('source', source);
      if (namespace) params.append('namespace', namespace);
      if (refresh) params.append('refresh', 'true');
      
      const endpoint = `/translations/${locale}/`;
      const url = params.toString() ? `${endpoint}?${params}` : endpoint;
      
      console.log(`üåç –ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –ø–µ—Ä–µ–∫–ª–∞–¥—ñ–≤: ${locale} (${source})`);
      
      const response = await this.get(url);
      
      if (response.error) {
        throw new Error(response.error);
      }
      
      console.log(`‚úÖ –ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–æ ${response.count || 0} –ø–µ—Ä–µ–∫–ª–∞–¥—ñ–≤ –¥–ª—è ${locale}`);
      return response;
      
    } catch (error) {
      console.error(`‚ùå –ü–æ–º–∏–ª–∫–∞ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –ø–µ—Ä–µ–∫–ª–∞–¥—ñ–≤ –¥–ª—è ${locale}:`, error.message);
      
      // Fallback —Å—Ç—Ä–∞—Ç–µ–≥—ñ—è
      return await this._getFallbackTranslations(locale);
    }
  }
  
  /**
   * Fallback –ø–µ—Ä–µ–∫–ª–∞–¥–∏ —è–∫—â–æ API –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∏–π
   */
  async _getFallbackTranslations(locale) {
    console.warn(`üîÑ –í–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è fallback –ø–µ—Ä–µ–∫–ª–∞–¥—ñ–≤ –¥–ª—è ${locale}`);
    
    try {
      // –°–ø—Ä–æ–±—É—î–º–æ –∑–∞–≤–∞–Ω—Ç–∞–∂–∏—Ç–∏ —Å—Ç–∞—Ç–∏—á–Ω—ñ —Ñ–∞–π–ª–∏
      const staticResponse = await fetch(`/locales/${locale}/common.json`);
      if (staticResponse.ok) {
        const staticData = await staticResponse.json();
        return {
          locale,
          translations: this._flattenObject(staticData),
          count: Object.keys(staticData).length,
          source: 'static_fallback',
          cached: false,
          fallback: true
        };
      }
    } catch (staticError) {
      console.warn('‚ö†Ô∏è –°—Ç–∞—Ç–∏—á–Ω—ñ —Ñ–∞–π–ª–∏ —Ç–∞–∫–æ–∂ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ñ:', staticError.message);
    }
    
    // –û—Å—Ç–∞–Ω–Ω—ñ–π fallback - –±–∞–∑–æ–≤—ñ –ø–µ—Ä–µ–∫–ª–∞–¥–∏
    const basicTranslations = this._getBasicTranslations(locale);
    return {
      locale,
      translations: basicTranslations,
      count: Object.keys(basicTranslations).length,
      source: 'basic_fallback',
      cached: false,
      fallback: true
    };
  }
  
  /**
   * –ë–∞–∑–æ–≤—ñ –ø–µ—Ä–µ–∫–ª–∞–¥–∏ –¥–ª—è –∫—Ä–∏—Ç–∏—á–Ω–∏—Ö –≤–∏–ø–∞–¥–∫—ñ–≤
   */
  _getBasicTranslations(locale) {
    if (locale === 'en') {
      return {
        'common.loading': 'Loading...',
        'common.error': 'Error occurred',
        'header.company': 'Company',
        'header.services': 'Services',
        'header.contact': 'Contact'
      };
    } else {
      return {
        'common.loading': '–ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è...',
        'common.error': '–°—Ç–∞–ª–∞—Å—è –ø–æ–º–∏–ª–∫–∞', 
        'header.company': '–ö–æ–º–ø–∞–Ω—ñ—è',
        'header.services': '–ü–æ—Å–ª—É–≥–∏',
        'header.contact': '–ö–æ–Ω—Ç–∞–∫—Ç–∏'
      };
    }
  }
  
  /**
   * –£—Ç–∏–ª—ñ—Ç–∞ –¥–ª—è —Å–ø–ª–æ—â–µ–Ω–Ω—è –æ–±'—î–∫—Ç–∞
   */
  _flattenObject(obj, prefix = '') {
    const flattened = {};
    
    for (const [key, value] of Object.entries(obj)) {
      const newKey = prefix ? `${prefix}.${key}` : key;
      
      if (typeof value === 'object' && value !== null && !Array.isArray(value)) {
        Object.assign(flattened, this._flattenObject(value, newKey));
      } else {
        flattened[newKey] = value;
      }
    }
    
    return flattened;
  }
  
  /**
   * –û—á–∏—â–µ–Ω–Ω—è –∫–µ—à—É –ø–µ—Ä–µ–∫–ª–∞–¥—ñ–≤
   */
  clearTranslationsCache(locale = null) {
    if (locale) {
      // –û—á–∏—â–∞—î–º–æ –∫–µ—à –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ—ó –ª–æ–∫–∞–ª—ñ
      for (const [key] of this.cache) {
        if (key.includes(`translations_${locale}_`)) {
          this.cache.delete(key);
        }
      }
    } else {
      // –û—á–∏—â–∞—î–º–æ –≤–µ—Å—å –∫–µ—à –ø–µ—Ä–µ–∫–ª–∞–¥—ñ–≤
      for (const [key] of this.cache) {
        if (key.startsWith('translations_')) {
          this.cache.delete(key);
        }
      }
    }
    console.log(`üßπ –û—á–∏—â–µ–Ω–æ –∫–µ—à –ø–µ—Ä–µ–∫–ª–∞–¥—ñ–≤${locale ? ` –¥–ª—è ${locale}` : ''}`);
  }
  
  /**
   * Webhook –¥–ª—è –æ—á–∏—â–µ–Ω–Ω—è —Å–µ—Ä–≤–µ—Ä–Ω–æ–≥–æ –∫–µ—à—É
   */
  async clearServerTranslationsCache() {
    try {
      await this.post('/webhooks/translations/', {});
      console.log('‚úÖ –°–µ—Ä–≤–µ—Ä–Ω–∏–π –∫–µ—à –ø–µ—Ä–µ–∫–ª–∞–¥—ñ–≤ –æ—á–∏—â–µ–Ω–æ');
      return true;
    } catch (error) {
      console.error('‚ùå –ü–æ–º–∏–ª–∫–∞ –æ—á–∏—â–µ–Ω–Ω—è —Å–µ—Ä–≤–µ—Ä–Ω–æ–≥–æ –∫–µ—à—É:', error.message);
      return false;
    }
  }
  
  // ==================== –Ü–ù–®–Ü API –ú–ï–¢–û–î–ò ====================
  
  // –ü–æ—Å–ª—É–≥–∏
  async getServices() {
    return this.get('/services/');
  }
  
  // –ü—Ä–æ–µ–∫—Ç–∏
  async getProjects() {
    return this.get('/projects/');
  }
  
  async getProjectCategories() {
    return this.get('/project-categories/');
  }
  
  // –ö–æ–Ω—Ç–µ–Ω—Ç —Å—Ç–æ—Ä—ñ–Ω–æ–∫
  async getHomePage() {
    return this.get('/homepage/');
  }
  
  async getAboutPage() {
    return this.get('/about/');
  }
  
  // –ö–æ–Ω—Ç–∞–∫—Ç–∏
  async getOffices() {
    return this.get('/offices/');
  }
  
  async submitContactForm(data) {
    return this.post('/contact-inquiries/', data);
  }
  
  // –í–∞–∫–∞–Ω—Å—ñ—ó
  async getJobs() {
    return this.get('/jobs/');
  }
  
  async submitJobApplication(data) {
    return this.post('/job-applications/', data);
  }
}

// –ï–∫—Å–ø–æ—Ä—Ç—É—î–º–æ —î–¥–∏–Ω–∏–π –µ–∫–∑–µ–º–ø–ª—è—Ä
const apiService = new ApiService();
export default apiService;
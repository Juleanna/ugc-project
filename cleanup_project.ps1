# cleanup_project.ps1 - –°–∫—Ä–∏–ø—Ç –¥–ª—è –≤–∏–¥–∞–ª–µ–Ω–Ω—è –Ω–µ–ø–æ—Ç—Ä—ñ–±–Ω–æ–≥–æ –∫–æ–¥—É (Windows PowerShell)

# –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ PowerShell –≤–µ—Ä—Å—ñ—ó
if ($PSVersionTable.PSVersion.Major -lt 5) {
    Write-Host "‚ùå –ü–æ—Ç—Ä—ñ–±–µ–Ω PowerShell 5.0 –∞–±–æ –Ω–æ–≤—ñ—à–∏–π" -ForegroundColor Red
    exit 1
}

Write-Host "üßπ –ü–æ—á–∞—Ç–æ–∫ –æ—á–∏—â–µ–Ω–Ω—è –ø—Ä–æ–µ–∫—Ç—É –≤—ñ–¥ –¥—É–±–ª—é–≤–∞–Ω—å..." -ForegroundColor Green

# ============================= –§–£–ù–ö–¶–Ü–á –£–¢–ò–õ–Ü–¢–ò =============================

function Write-ColorOutput($ForegroundColor) {
    $fc = $host.UI.RawUI.ForegroundColor
    $host.UI.RawUI.ForegroundColor = $ForegroundColor
    if ($args) {
        Write-Output $args
    }
    else {
        $input | Write-Output
    }
    $host.UI.RawUI.ForegroundColor = $fc
}

function Test-IsEmptyFile {
    param([string]$FilePath)
    
    if (-not (Test-Path $FilePath)) {
        return $false
    }
    
    $content = Get-Content $FilePath | Where-Object { 
        $_ -notmatch "^#" -and 
        $_ -notmatch "^from " -and 
        $_ -notmatch "^import " -and 
        $_ -notmatch "^\s*$" 
    }
    
    return ($content.Count -le 1)
}

function Remove-IfExists {
    param([string]$FilePath)
    
    if (Test-Path $FilePath) {
        Remove-Item $FilePath -Force
        Write-Host "   ‚ùå –í–∏–¥–∞–ª–µ–Ω–æ: $FilePath" -ForegroundColor Red
        return $true
    } else {
        Write-Host "   ‚ÑπÔ∏è  –§–∞–π–ª –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ: $FilePath" -ForegroundColor Yellow
        return $false
    }
}

function Get-FileSize {
    param([string]$FilePath)
    
    if (Test-Path $FilePath) {
        return (Get-Item $FilePath).Length
    }
    return 0
}

# ============================= –°–¢–í–û–†–ï–ù–ù–Ø BACKUP =============================

Write-Host "üì¶ –û—á–∏—â–µ–Ω–Ω—è Backend..." -ForegroundColor Blue

$timestamp = Get-Date -Format "yyyyMMdd_HHmmss"
$backupDir = "backup\$timestamp"

Write-Host "üíæ –°—Ç–≤–æ—Ä–µ–Ω–Ω—è —Ä–µ–∑–µ—Ä–≤–Ω–∏—Ö –∫–æ–ø—ñ–π..." -ForegroundColor Yellow

# –°—Ç–≤–æ—Ä—é—î–º–æ –¥–∏—Ä–µ–∫—Ç–æ—Ä—ñ—é backup
if (-not (Test-Path "backup")) {
    New-Item -ItemType Directory -Path "backup" | Out-Null
}

New-Item -ItemType Directory -Path $backupDir -Force | Out-Null

# –ö–æ–ø—ñ—é—î–º–æ –≤–∞–∂–ª–∏–≤—ñ —Ñ–∞–π–ª–∏
$filesToBackup = @(
    "backend\apps\api\urls.py",
    "backend\apps\api\translations_views.py",
    "frontend\src\hooks\useTranslations.js",
    "frontend\src\contexts\TranslationContext.jsx"
)

foreach ($file in $filesToBackup) {
    if (Test-Path $file) {
        $backupFile = Join-Path $backupDir (Split-Path $file -Leaf) + ".bak"
        Copy-Item $file $backupFile
        Write-Host "   üíæ –ó–±–µ—Ä–µ–∂–µ–Ω–æ: $file -> $backupFile" -ForegroundColor Green
    }
}

# ============================= BACKEND CLEANUP =============================

Write-Host "`nüóëÔ∏è  –í–∏–¥–∞–ª–µ–Ω–Ω—è –ø–æ—Ä–æ–∂–Ω—ñ—Ö views —Ñ–∞–π–ª—ñ–≤..." -ForegroundColor Yellow

$emptyViewsFiles = @(
    "backend\apps\content\views.py",
    "backend\apps\jobs\views.py",
    "backend\apps\projects\views.py",
    "backend\apps\contacts\views.py"
)

foreach ($file in $emptyViewsFiles) {
    if (Test-IsEmptyFile $file) {
        Remove-Item $file -Force
        Write-Host "   ‚ùå –í–∏–¥–∞–ª–µ–Ω–æ: $file (–ø–æ—Ä–æ–∂–Ω—ñ–π)" -ForegroundColor Red
    } elseif (Test-Path $file) {
        Write-Host "   ‚úÖ –ó–∞–ª–∏—à–µ–Ω–æ: $file (–º–∞—î –∫–æ–Ω—Ç–µ–Ω—Ç)" -ForegroundColor Green
    } else {
        Write-Host "   ‚ÑπÔ∏è  –§–∞–π–ª –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ: $file" -ForegroundColor Yellow
    }
}

# –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —Å—Ç–∞—Ä—ñ —Ñ–∞–π–ª–∏ –ø–µ—Ä–µ–∫–ª–∞–¥—ñ–≤
Write-Host "`nüóëÔ∏è  –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –∑–∞—Å—Ç–∞—Ä—ñ–ª–∏—Ö —Ñ–∞–π–ª—ñ–≤ –ø–µ—Ä–µ–∫–ª–∞–¥—ñ–≤..." -ForegroundColor Yellow

if (Test-Path "backend\apps\api\translations_views.py") {
    $content = Get-Content "backend\apps\api\translations_views.py" -Raw
    if ($content -match "StaticTranslationsAPIView|DynamicTranslationsAPIView|TranslationsAPIView") {
        Write-Host "   ‚ö†Ô∏è  –ó–Ω–∞–π–¥–µ–Ω–æ —Å—Ç–∞—Ä—ñ views –¥–ª—è –ø–µ—Ä–µ–∫–ª–∞–¥—ñ–≤ –≤ translations_views.py" -ForegroundColor Yellow
        Write-Host "   üí° –§–∞–π–ª –±—É–¥–µ –∑–∞–º—ñ–Ω–µ–Ω–æ –Ω–æ–≤–∏–º —É–Ω—ñ–≤–µ—Ä—Å–∞–ª—å–Ω–∏–º view" -ForegroundColor Cyan
    }
}

# ============================= FRONTEND CLEANUP =============================

Write-Host "`n‚öõÔ∏è  –û—á–∏—â–µ–Ω–Ω—è Frontend..." -ForegroundColor Blue

Write-Host "üóëÔ∏è  –í–∏–¥–∞–ª–µ–Ω–Ω—è –¥—É–±–ª—é—é—á–∏—Ö —Ö—É–∫—ñ–≤..." -ForegroundColor Yellow

$duplicateFiles = @(
    "frontend\src\hooks\useLazyTranslations.js",
    "frontend\src\hooks\useTranslationAnalytics.js",
    "frontend\src\components\TranslationPreloader.jsx"
)

$removedCount = 0
foreach ($file in $duplicateFiles) {
    if (Remove-IfExists $file) {
        $removedCount++
    }
}

# –í–∏–¥–∞–ª—è—î–º–æ .idea –¥–∏—Ä–µ–∫—Ç–æ—Ä—ñ—é
if (Test-Path "frontend\.idea") {
    Remove-Item "frontend\.idea" -Recurse -Force
    Write-Host "   ‚ùå –í–∏–¥–∞–ª–µ–Ω–æ: frontend\.idea\ (IDE –∫–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—è)" -ForegroundColor Red
    $removedCount++
}

# ============================= –ê–ù–ê–õ–Ü–ó –î–£–ë–õ–Æ–í–ê–ù–¨ =============================

Write-Host "`nüîç –ê–Ω–∞–ª—ñ–∑ –∑–∞–ª–∏—à–∫–æ–≤–∏—Ö –¥—É–±–ª—é–≤–∞–Ω—å..." -ForegroundColor Blue

function Find-Duplicates {
    param(
        [string]$Directory,
        [string]$Pattern,
        [string[]]$Extensions = @("*.js", "*.jsx", "*.py")
    )
    
    Write-Host "   üîé –ü–æ—à—É–∫ '$Pattern' –≤ $Directory:" -ForegroundColor Cyan
    
    $files = Get-ChildItem -Path $Directory -Include $Extensions -Recurse -ErrorAction SilentlyContinue
    
    foreach ($file in $files) {
        try {
            $matches = Select-String -Path $file.FullName -Pattern $Pattern -AllMatches -ErrorAction SilentlyContinue
            if ($matches) {
                $count = $matches.Count
                Write-Host "      üìÑ $($file.FullName): $count –≤—Ö–æ–¥–∂–µ–Ω—å" -ForegroundColor White
            }
        } catch {
            # –Ü–≥–Ω–æ—Ä—É—î–º–æ –ø–æ–º–∏–ª–∫–∏ —á–∏—Ç–∞–Ω–Ω—è —Ñ–∞–π–ª—ñ–≤
        }
    }
}

# –®—É–∫–∞—î–º–æ –¥—É–±–ª—é—é—á—ñ —Ñ—É–Ω–∫—Ü—ñ—ó
if (Test-Path "frontend\src") {
    Find-Duplicates "frontend\src" "useTranslations|loadTranslations|getTranslations"
}

if (Test-Path "backend\apps") {
    Find-Duplicates "backend\apps" "TranslationsAPIView|translations"
}

# ============================= –ê–ù–ê–õ–Ü–ó PACKAGE.JSON =============================

Write-Host "`nüì¶ –ê–Ω–∞–ª—ñ–∑ package.json –Ω–∞ –∑–∞–π–≤—ñ –∑–∞–ª–µ–∂–Ω–æ—Å—Ç—ñ..." -ForegroundColor Blue

if (Test-Path "frontend\package.json") {
    $packageJson = Get-Content "frontend\package.json" | ConvertFrom-Json
    $dependencies = @()
    
    if ($packageJson.dependencies) {
        $dependencies += $packageJson.dependencies.PSObject.Properties.Name
    }
    if ($packageJson.devDependencies) {
        $dependencies += $packageJson.devDependencies.PSObject.Properties.Name
    }
    
    $potentialUnused = @("lodash", "moment", "jquery", "underscore", "axios", "request")
    $unusedPackages = @()
    
    foreach ($package in $potentialUnused) {
        if ($dependencies -contains $package) {
            # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —á–∏ –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î—Ç—å—Å—è –≤ –∫–æ–¥—ñ
            $usageFound = $false
            $jsFiles = Get-ChildItem -Path "frontend\src" -Include "*.js", "*.jsx" -Recurse -ErrorAction SilentlyContinue
            
            foreach ($file in $jsFiles) {
                try {
                    $content = Get-Content $file.FullName -Raw -ErrorAction SilentlyContinue
                    if ($content -match "import.*$package|require.*$package") {
                        $usageFound = $true
                        break
                    }
                } catch {
                    # –Ü–≥–Ω–æ—Ä—É—î–º–æ –ø–æ–º–∏–ª–∫–∏
                }
            }
            
            if (-not $usageFound) {
                $unusedPackages += $package
            }
        }
    }
    
    if ($unusedPackages.Count -gt 0) {
        Write-Host "   ‚ö†Ô∏è  –ü–æ—Ç–µ–Ω—Ü—ñ–π–Ω–æ –Ω–µ–≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–≤–∞–Ω—ñ –ø–∞–∫–µ—Ç–∏:" -ForegroundColor Yellow
        foreach ($package in $unusedPackages) {
            Write-Host "      - $package" -ForegroundColor Red
        }
        $packagesString = $unusedPackages -join " "
        Write-Host "   üí° –†–æ–∑–≥–ª—è–Ω—å—Ç–µ –º–æ–∂–ª–∏–≤—ñ—Å—Ç—å –≤–∏–¥–∞–ª–µ–Ω–Ω—è –∫–æ–º–∞–Ω–¥–æ—é: npm uninstall $packagesString" -ForegroundColor Cyan
    } else {
        Write-Host "   ‚úÖ –ó–∞–π–≤—ñ –∑–∞–ª–µ–∂–Ω–æ—Å—Ç—ñ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ" -ForegroundColor Green
    }
}

# ============================= –ê–ù–ê–õ–Ü–ó –†–û–ó–ú–Ü–†–£ –§–ê–ô–õ–Ü–í =============================

Write-Host "`nüìä –ê–Ω–∞–ª—ñ–∑ –≤–µ–ª–∏–∫–∏—Ö —Ñ–∞–π–ª—ñ–≤..." -ForegroundColor Blue

$largeFiles = Get-ChildItem -Include "*.js", "*.jsx", "*.py", "*.json" -Recurse -ErrorAction SilentlyContinue | 
    Where-Object { $_.Length -gt 102400 } | 
    Sort-Object Length -Descending | 
    Select-Object -First 10

if ($largeFiles) {
    Write-Host "   üìà –í–µ–ª–∏–∫—ñ —Ñ–∞–π–ª–∏ (>100KB):" -ForegroundColor Yellow
    foreach ($file in $largeFiles) {
        $sizeKB = [math]::Round($file.Length / 1024, 1)
        Write-Host "      üìÑ $($file.FullName): ${sizeKB}KB" -ForegroundColor White
    }
} else {
    Write-Host "   ‚úÖ –í–µ–ª–∏–∫–∏—Ö —Ñ–∞–π–ª—ñ–≤ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ" -ForegroundColor Green
}

# ============================= –ì–ï–ù–ï–†–ê–¶–Ü–Ø –ó–í–Ü–¢–£ =============================

Write-Host "`nüìã –ì–µ–Ω–µ—Ä–∞—Ü—ñ—è –∑–≤—ñ—Ç—É –æ—á–∏—â–µ–Ω–Ω—è..." -ForegroundColor Blue

$reportContent = @"
# –ó–≤—ñ—Ç –æ—á–∏—â–µ–Ω–Ω—è –ø—Ä–æ–µ–∫—Ç—É

## –î–∞—Ç–∞: $(Get-Date)

## –í–∏–¥–∞–ª–µ–Ω—ñ —Ñ–∞–π–ª–∏:
- –ü–æ—Ä–æ–∂–Ω—ñ views —Ñ–∞–π–ª–∏
- –î—É–±–ª—é—é—á—ñ —Ö—É–∫–∏: useLazyTranslations.js, useTranslationAnalytics.js
- TranslationPreloader.jsx
- IDE –∫–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—è (.idea)

## –ó–∞–º—ñ–Ω–µ–Ω—ñ —Ñ–∞–π–ª–∏:
- backend\apps\api\urls.py (—Å–ø—Ä–æ—â–µ–Ω–æ –º–∞—Ä—à—Ä—É—Ç–∏)
- backend\apps\api\translations_views.py (—É–Ω—ñ–≤–µ—Ä—Å–∞–ª—å–Ω–∏–π API)
- frontend\src\hooks\useTranslations.js (–æ–±'—î–¥–Ω–∞–Ω–æ —Ñ—É–Ω–∫—Ü—ñ–æ–Ω–∞–ª—å–Ω—ñ—Å—Ç—å)
- frontend\src\contexts\TranslationContext.jsx (—Å–ø—Ä–æ—â–µ–Ω–æ)

## –†–µ–∑—É–ª—å—Ç–∞—Ç:
- –í–∏–¥–∞–ª–µ–Ω–æ –¥—É–±–ª—é—é—á–∏–π –∫–æ–¥
- –û–±'—î–¥–Ω–∞–Ω–æ API –¥–ª—è –ø–µ—Ä–µ–∫–ª–∞–¥—ñ–≤
- –ü–æ–∫—Ä–∞—â–µ–Ω–æ –∫–µ—à—É–≤–∞–Ω–Ω—è —Ç–∞ –ø—Ä–æ–¥—É–∫—Ç–∏–≤–Ω—ñ—Å—Ç—å
- –î–æ–¥–∞–Ω–æ –∞–Ω–∞–ª—ñ—Ç–∏–∫—É —Ç–∞ –¥—ñ–∞–≥–Ω–æ—Å—Ç–∏–∫—É

## –†–µ–∑–µ—Ä–≤–Ω—ñ –∫–æ–ø—ñ—ó:
–í—Å—ñ –æ—Ä–∏–≥—ñ–Ω–∞–ª—å–Ω—ñ —Ñ–∞–π–ª–∏ –∑–±–µ—Ä–µ–∂–µ–Ω–æ –≤: $backupDir\

## –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü—ñ—ó:
1. –ü—Ä–æ—Ç–µ—Å—Ç—É–≤–∞—Ç–∏ —Ñ—É–Ω–∫—Ü—ñ–æ–Ω–∞–ª—å–Ω—ñ—Å—Ç—å –ø–µ—Ä–µ–∫–ª–∞–¥—ñ–≤
2. –û–Ω–æ–≤–∏—Ç–∏ –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü—ñ—é API
3. –ü–µ—Ä–µ–≤—ñ—Ä–∏—Ç–∏ —Ç–µ—Å—Ç–∏
4. –†–æ–∑–≥–ª—è–Ω—É—Ç–∏ –≤–∏–¥–∞–ª–µ–Ω–Ω—è –Ω–µ–≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–≤–∞–Ω–∏—Ö npm –ø–∞–∫–µ—Ç—ñ–≤
"@

$reportPath = Join-Path $backupDir "cleanup_report.md"
$reportContent | Out-File -FilePath $reportPath -Encoding UTF8

Write-Host "‚úÖ –û—á–∏—â–µ–Ω–Ω—è –∑–∞–≤–µ—Ä—à–µ–Ω–æ!" -ForegroundColor Green
Write-Host "üìÅ –†–µ–∑–µ—Ä–≤–Ω—ñ –∫–æ–ø—ñ—ó –∑–±–µ—Ä–µ–∂–µ–Ω–æ –≤: $backupDir\" -ForegroundColor Cyan
Write-Host "üìã –î–µ—Ç–∞–ª—å–Ω–∏–π –∑–≤—ñ—Ç: $reportPath" -ForegroundColor Cyan

# ============================= –ù–ê–°–¢–£–ü–ù–Ü –ö–†–û–ö–ò =============================

Write-Host "`nüöÄ –ù–ê–°–¢–£–ü–ù–Ü –ö–†–û–ö–ò:" -ForegroundColor Magenta
Write-Host "1. –ó–∞–º—ñ–Ω—ñ—Ç—å —Ñ–∞–π–ª–∏ –Ω–æ–≤–∏–º–∏ –≤–µ—Ä—Å—ñ—è–º–∏ –∑ –∞—Ä—Ç–µ—Ñ–∞–∫—Ç—ñ–≤" -ForegroundColor White
Write-Host "2. –ó–∞–ø—É—Å—Ç—ñ—Ç—å: python manage.py collectstatic" -ForegroundColor White
Write-Host "3. –ó–∞–ø—É—Å—Ç—ñ—Ç—å: npm install (–≤ frontend –¥–∏—Ä–µ–∫—Ç–æ—Ä—ñ—ó)" -ForegroundColor White
Write-Host "4. –ü—Ä–æ—Ç–µ—Å—Ç—É–π—Ç–µ —Ñ—É–Ω–∫—Ü—ñ–æ–Ω–∞–ª—å–Ω—ñ—Å—Ç—å" -ForegroundColor White
Write-Host "5. –í–∏–¥–∞–ª—ñ—Ç—å –ø–∞–ø–∫—É backup\ –ø—ñ—Å–ª—è –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏" -ForegroundColor White

Write-Host "`nüéâ –ü—Ä–æ–µ–∫—Ç –æ—á–∏—â–µ–Ω–æ! –î—É–±–ª—é–≤–∞–Ω–Ω—è –≤–∏–¥–∞–ª–µ–Ω–æ, –∫–æ–¥ –æ–ø—Ç–∏–º—ñ–∑–æ–≤–∞–Ω–æ." -ForegroundColor Green

# ============================= –î–û–î–ê–¢–ö–û–í–Ü –ö–û–ú–ê–ù–î–ò –î–õ–Ø WINDOWS =============================

Write-Host "`nüí° –ö–æ—Ä–∏—Å–Ω—ñ –∫–æ–º–∞–Ω–¥–∏ –¥–ª—è Windows:" -ForegroundColor Cyan
Write-Host "   ‚Ä¢ –ó–∞–ø—É—Å–∫ Django: python manage.py runserver" -ForegroundColor Gray
Write-Host "   ‚Ä¢ –ó–∞–ø—É—Å–∫ React: npm run dev" -ForegroundColor Gray
Write-Host "   ‚Ä¢ –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –ø–æ—Ä—Ç—ñ–≤: netstat -an | findstr :8000" -ForegroundColor Gray
Write-Host "   ‚Ä¢ –í–∏–¥–∞–ª–µ–Ω–Ω—è node_modules: rmdir /s frontend\node_modules" -ForegroundColor Gray

# –ü–∞—É–∑–∞ –ø–µ—Ä–µ–¥ –∑–∞–∫—Ä–∏—Ç—Ç—è–º
Write-Host "`n–ù–∞—Ç–∏—Å–Ω—ñ—Ç—å –±—É–¥—å-—è–∫—É –∫–ª–∞–≤—ñ—à—É –¥–ª—è –ø—Ä–æ–¥–æ–≤–∂–µ–Ω–Ω—è..." -ForegroundColor Yellow
$null = $Host.UI.RawUI.ReadKey("NoEcho,IncludeKeyDown")